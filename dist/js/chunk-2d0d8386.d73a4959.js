(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0d8386"],{"79c1":function(e,n,t){"use strict";t.r(n);var l=t("7a23"),o={class:"content-section introduction"},s=Object(l["k"])("div",{class:"feature-intro"},[Object(l["k"])("h1",null,[Object(l["n"])("TreeTable "),Object(l["k"])("span",null,"Selection")]),Object(l["k"])("p",null,[Object(l["n"])("TreeTable supports "),Object(l["k"])("b",null,"single"),Object(l["n"])(", "),Object(l["k"])("b",null,"multiple"),Object(l["n"])(" and "),Object(l["k"])("b",null,"checkbox"),Object(l["n"])(" as selection modes.")])],-1),d={class:"content-section implementation"},c={class:"card"},i=Object(l["k"])("h5",null,"Single Selection",-1),a={class:"card"},r=Object(l["k"])("h5",null,"Multiple Selection with MetaKey",-1),u={class:"card"},m=Object(l["k"])("h5",null,"Multiple Selection without MetaKey",-1),p={class:"card"},y=Object(l["k"])("h5",null,"Checkbox Selection",-1),v={class:"card"},h=Object(l["k"])("h5",null,"Events",-1);function b(e,n,t,b,f,K){var S=Object(l["P"])("AppDemoActions"),T=Object(l["P"])("Column"),N=Object(l["P"])("TreeTable"),C=Object(l["P"])("AppDoc");return Object(l["H"])(),Object(l["j"])("div",null,[Object(l["k"])("div",o,[s,Object(l["o"])(S)]),Object(l["k"])("div",d,[Object(l["k"])("div",c,[i,Object(l["o"])(N,{value:f.nodes,selectionMode:"single",selectionKeys:f.selectedKey1,"onUpdate:selectionKeys":n[0]||(n[0]=function(e){return f.selectedKey1=e})},{default:Object(l["Z"])((function(){return[Object(l["o"])(T,{field:"name",header:"Name",expander:!0}),Object(l["o"])(T,{field:"size",header:"Size"}),Object(l["o"])(T,{field:"type",header:"Type"})]})),_:1},8,["value","selectionKeys"])]),Object(l["k"])("div",a,[r,Object(l["o"])(N,{value:f.nodes,selectionMode:"multiple",selectionKeys:f.selectedKeys1,"onUpdate:selectionKeys":n[1]||(n[1]=function(e){return f.selectedKeys1=e})},{default:Object(l["Z"])((function(){return[Object(l["o"])(T,{field:"name",header:"Name",expander:!0}),Object(l["o"])(T,{field:"size",header:"Size"}),Object(l["o"])(T,{field:"type",header:"Type"})]})),_:1},8,["value","selectionKeys"])]),Object(l["k"])("div",u,[m,Object(l["o"])(N,{value:f.nodes,selectionMode:"multiple",selectionKeys:f.selectedKeys2,"onUpdate:selectionKeys":n[2]||(n[2]=function(e){return f.selectedKeys2=e}),metaKeySelection:!1},{default:Object(l["Z"])((function(){return[Object(l["o"])(T,{field:"name",header:"Name",expander:!0}),Object(l["o"])(T,{field:"size",header:"Size"}),Object(l["o"])(T,{field:"type",header:"Type"})]})),_:1},8,["value","selectionKeys"])]),Object(l["k"])("div",p,[y,Object(l["o"])(N,{value:f.nodes,selectionMode:"checkbox",selectionKeys:f.selectedKeys3,"onUpdate:selectionKeys":n[3]||(n[3]=function(e){return f.selectedKeys3=e})},{default:Object(l["Z"])((function(){return[Object(l["o"])(T,{field:"name",header:"Name",expander:!0}),Object(l["o"])(T,{field:"size",header:"Size"}),Object(l["o"])(T,{field:"type",header:"Type"})]})),_:1},8,["value","selectionKeys"])]),Object(l["k"])("div",v,[h,Object(l["o"])(N,{value:f.nodes,selectionMode:"single",selectionKeys:f.selectedKey2,"onUpdate:selectionKeys":n[4]||(n[4]=function(e){return f.selectedKey2=e}),onNodeSelect:K.onNodeSelect,onNodeUnselect:K.onNodeUnselect},{default:Object(l["Z"])((function(){return[Object(l["o"])(T,{field:"name",header:"Name",expander:!0}),Object(l["o"])(T,{field:"size",header:"Size"}),Object(l["o"])(T,{field:"type",header:"Type"})]})),_:1},8,["value","selectionKeys","onNodeSelect","onNodeUnselect"])])]),Object(l["o"])(C,{name:"TreeTableSelectionDemo",sources:f.sources,service:["NodeService"],data:["treetablenodes"],github:"treetable/TreeTableSelectionDemo.vue"},null,8,["sources"])])}t("b0c0");var f=t("82f4"),K={data:function(){return{selectedKey1:null,selectedKey2:null,selectedKeys1:null,selectedKeys2:null,selectedKeys3:null,nodes:null,sources:{"options-api":{tabName:"Options API Source",content:'\n<template>\n    <div>\n        <Toast />\n\n        <div class="card">\n            <h5>Single Selection</h5>\n            <TreeTable :value="nodes" selectionMode="single" v-model:selectionKeys="selectedKey1">\n                <Column field="name" header="Name" :expander="true"></Column>\n                <Column field="size" header="Size"></Column>\n                <Column field="type" header="Type"></Column>\n            </TreeTable>\n        </div>\n\n        <div class="card">\n            <h5>Multiple Selection with MetaKey</h5>\n            <TreeTable :value="nodes" selectionMode="multiple" v-model:selectionKeys="selectedKeys1">\n                <Column field="name" header="Name" :expander="true"></Column>\n                <Column field="size" header="Size"></Column>\n                <Column field="type" header="Type"></Column>\n            </TreeTable>\n        </div>\n\n        <div class="card">\n            <h5>Multiple Selection without MetaKey</h5>\n            <TreeTable :value="nodes" selectionMode="multiple" v-model:selectionKeys="selectedKeys2" :metaKeySelection="false">\n                <Column field="name" header="Name" :expander="true"></Column>\n                <Column field="size" header="Size"></Column>\n                <Column field="type" header="Type"></Column>\n            </TreeTable>\n        </div>\n\n        <div class="card">\n            <h5>Checkbox Selection</h5>\n            <TreeTable :value="nodes" selectionMode="checkbox" v-model:selectionKeys="selectedKeys3">\n                <Column field="name" header="Name" :expander="true"></Column>\n                <Column field="size" header="Size"></Column>\n                <Column field="type" header="Type"></Column>\n            </TreeTable>\n        </div>\n\n        <div class="card">\n            <h5>Events</h5>\n            <TreeTable :value="nodes" selectionMode="single" v-model:selectionKeys="selectedKey2"\n                @nodeSelect="onNodeSelect" @nodeUnselect="onNodeUnselect">\n                <Column field="name" header="Name" :expander="true"></Column>\n                <Column field="size" header="Size"></Column>\n                <Column field="type" header="Type"></Column>\n            </TreeTable>\n        </div>\n    </div>                    \n</template>\n\n<script>\nimport NodeService from \'./service/NodeService\';\n\nexport default {\n    data() {\n        return {\n            selectedKey1: null,\n            selectedKey2: null,\n            selectedKeys1: null,\n            selectedKeys2: null,\n            selectedKeys3: null,\n            nodes: null\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n    },\n    mounted() {\n        this.nodeService.getTreeTableNodes().then(data => this.nodes = data);\n    },\n    methods: {\n        onNodeSelect(node) {\n            this.$toast.add({severity:\'success\', summary: \'Node Selected\', detail: node.data.name, life: 3000});\n        },\n        onNodeUnselect(node) {\n            this.$toast.add({severity:\'success\', summary: \'Node Unselected\', detail: node.data.name, life: 3000});\n        }\n    }\n}\n<\\/script>\n'},"composition-api":{tabName:"Composition API Source",content:'\n<template>\n    <div>\n        <Toast />\n\n        <div class="card">\n            <h5>Single Selection</h5>\n            <TreeTable :value="nodes" selectionMode="single" v-model:selectionKeys="selectedKey1">\n                <Column field="name" header="Name" :expander="true"></Column>\n                <Column field="size" header="Size"></Column>\n                <Column field="type" header="Type"></Column>\n            </TreeTable>\n        </div>\n\n        <div class="card">\n            <h5>Multiple Selection with MetaKey</h5>\n            <TreeTable :value="nodes" selectionMode="multiple" v-model:selectionKeys="selectedKeys1">\n                <Column field="name" header="Name" :expander="true"></Column>\n                <Column field="size" header="Size"></Column>\n                <Column field="type" header="Type"></Column>\n            </TreeTable>\n        </div>\n\n        <div class="card">\n            <h5>Multiple Selection without MetaKey</h5>\n            <TreeTable :value="nodes" selectionMode="multiple" v-model:selectionKeys="selectedKeys2" :metaKeySelection="false">\n                <Column field="name" header="Name" :expander="true"></Column>\n                <Column field="size" header="Size"></Column>\n                <Column field="type" header="Type"></Column>\n            </TreeTable>\n        </div>\n\n        <div class="card">\n            <h5>Checkbox Selection</h5>\n            <TreeTable :value="nodes" selectionMode="checkbox" v-model:selectionKeys="selectedKeys3">\n                <Column field="name" header="Name" :expander="true"></Column>\n                <Column field="size" header="Size"></Column>\n                <Column field="type" header="Type"></Column>\n            </TreeTable>\n        </div>\n\n        <div class="card">\n            <h5>Events</h5>\n            <TreeTable :value="nodes" selectionMode="single" v-model:selectionKeys="selectedKey2"\n                @nodeSelect="onNodeSelect" @nodeUnselect="onNodeUnselect">\n                <Column field="name" header="Name" :expander="true"></Column>\n                <Column field="size" header="Size"></Column>\n                <Column field="type" header="Type"></Column>\n            </TreeTable>\n        </div>\n    </div>                    \n</template>\n\n<script>\nimport { ref, onMounted } from \'vue\';\nimport { useToast } from \'primevue/usetoast\';\nimport NodeService from \'./service/NodeService\';\n\nexport default {\n    setup() {\n        onMounted(() => {\n            nodeService.value.getTreeTableNodes().then(data => nodes.value = data);\n        })\n\n        const toast = useToast();\n        const selectedKey1 = ref();\n        const selectedKey2 = ref();\n        const selectedKeys1 = ref();\n        const selectedKeys2 = ref();\n        const selectedKeys3 = ref();\n        const nodes = ref();\n        const nodeService = ref(new NodeService());\n        const onNodeSelect = (node) => {\n            toast.add({severity:\'success\', summary: \'Node Selected\', detail: node.data.name, life: 3000});\n        }\n        const onNodeUnselect = (node) => {\n            toast.add({severity:\'success\', summary: \'Node Unselected\', detail: node.data.name, life: 3000});\n        }\n\n        return { selectedKey1, selectedKey2, selectedKeys1, selectedKeys2, selectedKeys3, nodes, onNodeSelect, onNodeUnselect}\n    }\n}\n<\\/script>\n'},"browser-source":{tabName:"Browser Source",imports:'<script src="https://unpkg.com/primevue@^3/treetable/treetable.min.js"><\\/script>\n        <script src="https://unpkg.com/primevue@^3/column/column.min.js"><\\/script>\n        <script src="https://unpkg.com/primevue@^3/toast/toast.min.js"><\\/script>\n        <script src="https://unpkg.com/primevue@^3/toastservice/toastservice.min.js"><\\/script>\n        <script src="./NodeService.js"><\\/script>',content:'<div id="app">\n            <p-toast></p-toast>\n\n            <div class="card">\n                <h5>Single Selection</h5>\n                <p-treetable :value="nodes" selection-mode="single" v-model:selection-keys="selectedKey1">\n                    <p-column field="name" header="Name" :expander="true"></p-column>\n                    <p-column field="size" header="Size"></p-column>\n                    <p-column field="type" header="Type"></p-column>\n                </p-treetable>\n            </div>\n\n            <div class="card">\n                <h5>Multiple Selection with MetaKey</h5>\n                <p-treetable :value="nodes" selection-mode="multiple" v-model:selection-keys="selectedKeys1">\n                    <p-column field="name" header="Name" :expander="true"></p-column>\n                    <p-column field="size" header="Size"></p-column>\n                    <p-column field="type" header="Type"></p-column>\n                </p-treetable>\n            </div>\n\n            <div class="card">\n                <h5>Multiple Selection without MetaKey</h5>\n                <p-treetable :value="nodes" selection-mode="multiple" v-model:selection-keys="selectedKeys2" :meta-key-selection="false">\n                    <p-column field="name" header="Name" :expander="true"></p-column>\n                    <p-column field="size" header="Size"></p-column>\n                    <p-column field="type" header="Type"></p-column>\n                </p-treetable>\n            </div>\n\n            <div class="card">\n                <h5>Checkbox Selection</h5>\n                <p-treetable :value="nodes" selection-mode="checkbox" v-model:selection-keys="selectedKeys3">\n                    <p-column field="name" header="Name" :expander="true"></p-column>\n                    <p-column field="size" header="Size"></p-column>\n                    <p-column field="type" header="Type"></p-column>\n                </p-treetable>\n            </div>\n\n            <div class="card">\n                <h5>Events</h5>\n                <p-treetable :value="nodes" selection-mode="single" v-model:selection-keys="selectedKey2"\n                    @node-select="onNodeSelect" @node-unselect="onNodeUnselect">\n                    <p-column field="name" header="Name" :expander="true"></p-column>\n                    <p-column field="size" header="Size"></p-column>\n                    <p-column field="type" header="Type"></p-column>\n                </p-treetable>\n            </div>\n        </div>                    \n\n        <script type="module">\n        const { createApp, ref, onMounted } = Vue;\n        const { useToast } = primevue.usetoast;\n\n        const App = {\n            setup() {\n                onMounted(() => {\n                    nodeService.value.getTreeTableNodes().then(data => nodes.value = data);\n                })\n\n                const toast = useToast();\n                const selectedKey1 = ref();\n                const selectedKey2 = ref();\n                const selectedKeys1 = ref();\n                const selectedKeys2 = ref();\n                const selectedKeys3 = ref();\n                const nodes = ref();\n                const nodeService = ref(new NodeService());\n                const onNodeSelect = (node) => {\n                    toast.add({severity:\'success\', summary: \'Node Selected\', detail: node.data.name, life: 3000});\n                }\n                const onNodeUnselect = (node) => {\n                    toast.add({severity:\'success\', summary: \'Node Unselected\', detail: node.data.name, life: 3000});\n                }\n\n                return { selectedKey1, selectedKey2, selectedKeys1, selectedKeys2, selectedKeys3, nodes, onNodeSelect, onNodeUnselect}\n            },\n            components: {\n                "p-treetable": primevue.treetable,\n                "p-column": primevue.column,\n                "p-toast": primevue.toast\n            }\n        };\n\n        createApp(App)\n            .use(primevue.config.default)\n            .use(primevue.toastservice)\n            .mount("#app");\n        <\\/script>\n'}}}},nodeService:null,created:function(){this.nodeService=new f["a"]},mounted:function(){var e=this;this.nodeService.getTreeTableNodes().then((function(n){return e.nodes=n}))},methods:{onNodeSelect:function(e){this.$toast.add({severity:"success",summary:"Node Selected",detail:e.data.name,life:3e3})},onNodeUnselect:function(e){this.$toast.add({severity:"success",summary:"Node Unselected",detail:e.data.name,life:3e3})}}},S=t("6b0d"),T=t.n(S);const N=T()(K,[["render",b]]);n["default"]=N}}]);