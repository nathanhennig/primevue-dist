(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0b24dc"],{2415:function(n,e,o){"use strict";o.r(e);var a=o("7a23"),t={class:"content-section introduction"},d=Object(a["k"])("div",{class:"feature-intro"},[Object(a["k"])("h1",null,[Object(a["n"])("TreeTable "),Object(a["k"])("span",null,"Lazy")]),Object(a["k"])("p",null,"Lazy mode is handy to deal with large datasets, instead of loading the entire data, small chunks of data is loaded by invoking corresponding callbacks everytime paging or sorting. In addition, children of a node can be loaded on demand at onNodeExpand event as well. Sample belows imitates lazy paging by using an in memory list..")],-1),l={class:"content-section implementation"},s={class:"card"};function r(n,e,o,r,i,u){var c=Object(a["P"])("AppDemoActions"),p=Object(a["P"])("Column"),m=Object(a["P"])("TreeTable"),f=Object(a["P"])("AppDoc");return Object(a["H"])(),Object(a["j"])("div",null,[Object(a["k"])("div",t,[d,Object(a["o"])(c)]),Object(a["k"])("div",l,[Object(a["k"])("div",s,[Object(a["o"])(m,{value:i.nodes,lazy:!0,paginator:!0,rows:i.rows,loading:i.loading,onNodeExpand:u.onExpand,onPage:u.onPage,totalRecords:i.totalRecords},{default:Object(a["Z"])((function(){return[Object(a["o"])(p,{field:"name",header:"Name",expander:!0}),Object(a["o"])(p,{field:"size",header:"Size"}),Object(a["o"])(p,{field:"type",header:"Type"})]})),_:1},8,["value","rows","loading","onNodeExpand","onPage","totalRecords"])])]),Object(a["o"])(f,{name:"TreeTableLazyDemo",sources:i.sources,service:["NodeService"],data:["treetablenodes"],github:"treetable/TreeTableLazyDemo.vue"},null,8,["sources"])])}var i=o("5530"),u=(o("b0c0"),o("d81d"),{data:function(){return{nodes:null,rows:10,loading:!1,totalRecords:0,sources:{"options-api":{tabName:"Options API Source",content:'\n<template>\n    <div>\n        <TreeTable :value="nodes" :lazy="true" :paginator="true" :rows="rows" :loading="loading"\n            @nodeExpand="onExpand" @page="onPage" :totalRecords="totalRecords">\n            <Column field="name" header="Name" :expander="true"></Column>\n            <Column field="size" header="Size"></Column>\n            <Column field="type" header="Type"></Column>\n        </TreeTable>\n    </div>                   \n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            nodes: null,\n            rows: 10,\n            loading: false,\n            totalRecords: 0\n        }\n    },\n    mounted() {\n        this.loading = true;\n\n        setTimeout(() => {\n            this.loading = false;\n            this.nodes = this.loadNodes(0, this.rows);\n            this.totalRecords = 1000;\n        }, 1000);\n    },\n    methods: {\n        onExpand(node) {\n            if (!node.children) {\n                this.loading = true;\n\n                setTimeout(() => {\n                    let lazyNode = {...node};\n\n                    lazyNode.children = [\n                        {\n                            data: {\n                                name: lazyNode.data.name + \' - 0\',\n                                size: Math.floor(Math.random() * 1000) + 1 + \'kb\',\n                                type: \'File\'\n                            },\n                        },\n                        {\n                            data: {\n                                name: lazyNode.data.name + \' - 1\',\n                                size: Math.floor(Math.random() * 1000) + 1 + \'kb\',\n                                type: \'File\'\n                            }\n                        }\n                    ];\n\n                    let nodes = this.nodes.map(n => {\n                        if (n.key === node.key) {\n                            n = lazyNode;\n                        }\n\n                        return n;\n                    });\n\n                    this.loading = false;\n                    this.nodes = nodes;\n                }, 250);\n            }\n        },\n        onPage(event) {\n            this.loading = true;\n\n            //imitate delay of a backend call\n            setTimeout(() => {\n                this.loading = false;\n                this.nodes = this.loadNodes(event.first, this.rows);\n            }, 1000);\n        },\n        loadNodes(first, rows) {\n            let nodes = [];\n\n            for(let i = 0; i < rows; i++) {\n                let node = {\n                    key: (first + i),\n                    data: {\n                        name: \'Item \' + (first + i),\n                        size: Math.floor(Math.random() * 1000) + 1 + \'kb\',\n                        type: \'Type \' + (first + i)\n                    },\n                    leaf: false\n                };\n\n                nodes.push(node);\n            }\n\n            return nodes;\n        }\n    }\n}\n<\\/script>\n'},"composition-api":{tabName:"Composition API Source",content:'\n<template>\n    <div>\n        <TreeTable :value="nodes" :lazy="true" :paginator="true" :rows="rows" :loading="loading"\n            @nodeExpand="onExpand" @page="onPage" :totalRecords="totalRecords">\n            <Column field="name" header="Name" :expander="true"></Column>\n            <Column field="size" header="Size"></Column>\n            <Column field="type" header="Type"></Column>\n        </TreeTable>\n    </div>                   \n</template>\n\n<script>\nimport { ref, onMounted } from \'vue\';\n\nexport default {\n    setup() {\n        onMounted(() => {\n            loading.value = true;\n\n            setTimeout(() => {\n                loading.value = false;\n                nodes.value = loadNodes(0, rows.value);\n                totalRecords.value = 1000;\n            }, 1000);\n        })\n        const nodes = ref();\n        const rows = ref(10);\n        const loading = ref(false);\n        const totalRecords = ref(0);\n        const onExpand = (node) => {\n            if (!node.children) {\n                loading.value = true;\n\n                setTimeout(() => {\n                    let lazyNode = {...node};\n\n                    lazyNode.children = [\n                        {\n                            data: {\n                                name: lazyNode.data.name + \' - 0\',\n                                size: Math.floor(Math.random() * 1000) + 1 + \'kb\',\n                                type: \'File\'\n                            },\n                        },\n                        {\n                            data: {\n                                name: lazyNode.data.name + \' - 1\',\n                                size: Math.floor(Math.random() * 1000) + 1 + \'kb\',\n                                type: \'File\'\n                            }\n                        }\n                    ];\n\n                    let newNodes = nodes.value.map(n => {\n                        if (n.key === node.key) {\n                            n = lazyNode;\n                        }\n\n                        return n;\n                    });\n\n                    loading.value = false;\n                    nodes.value = newNodes;\n                }, 250);\n            }\n        };\n        const onPage = (event) => {\n            loading.value = true;\n\n            //imitate delay of a backend call\n            setTimeout(() => {\n                loading.value = false;\n                nodes.value = loadNodes(event.first, rows.value);\n            }, 1000);\n        };\n        const loadNodes = (first, rows) => {\n            let nodes = [];\n\n            for(let i = 0; i < rows; i++) {\n                let node = {\n                    key: (first + i),\n                    data: {\n                        name: \'Item \' + (first + i),\n                        size: Math.floor(Math.random() * 1000) + 1 + \'kb\',\n                        type: \'Type \' + (first + i)\n                    },\n                    leaf: false\n                };\n\n                nodes.push(node);\n            }\n\n            return nodes;\n        }\n\n        return { nodes, rows, loading, totalRecords, onExpand, onPage, loadNodes }\n    }\n    \n}\n<\\/script>\n'},"browser-source":{tabName:"Browser Source",imports:'<script src="https://unpkg.com/primevue@^3/treetable/treetable.min.js"><\\/script>\n        <script src="https://unpkg.com/primevue@^3/column/column.min.js"><\\/script>',content:'<div id="app">\n            <p-treetable :value="nodes" :lazy="true" :paginator="true" :rows="rows" :loading="loading"\n                @node-expand="onExpand" @page="onPage" :total-records="totalRecords">\n                <p-column field="name" header="Name" :expander="true"></p-column>\n                <p-column field="size" header="Size"></p-column>\n                <p-column field="type" header="Type"></p-column>\n            </p-treetable>\n        </div>                   \n\n        <script type="module">\n        const { createApp, ref, onMounted } = Vue;\n\n        const App = {\n            setup() {\n                onMounted(() => {\n                    loading.value = true;\n\n                    setTimeout(() => {\n                        loading.value = false;\n                        nodes.value = loadNodes(0, rows.value);\n                        totalRecords.value = 1000;\n                    }, 1000);\n                })\n                const nodes = ref();\n                const rows = ref(10);\n                const loading = ref(false);\n                const totalRecords = ref(0);\n                const onExpand = (node) => {\n                    if (!node.children) {\n                        loading.value = true;\n\n                        setTimeout(() => {\n                            let lazyNode = {...node};\n\n                            lazyNode.children = [\n                                {\n                                    data: {\n                                        name: lazyNode.data.name + \' - 0\',\n                                        size: Math.floor(Math.random() * 1000) + 1 + \'kb\',\n                                        type: \'File\'\n                                    },\n                                },\n                                {\n                                    data: {\n                                        name: lazyNode.data.name + \' - 1\',\n                                        size: Math.floor(Math.random() * 1000) + 1 + \'kb\',\n                                        type: \'File\'\n                                    }\n                                }\n                            ];\n\n                            let newNodes = nodes.value.map(n => {\n                                if (n.key === node.key) {\n                                    n = lazyNode;\n                                }\n\n                                return n;\n                            });\n\n                            loading.value = false;\n                            nodes.value = newNodes;\n                        }, 250);\n                    }\n                };\n                const onPage = (event) => {\n                    loading.value = true;\n\n                    //imitate delay of a backend call\n                    setTimeout(() => {\n                        loading.value = false;\n                        nodes.value = loadNodes(event.first, rows.value);\n                    }, 1000);\n                };\n                const loadNodes = (first, rows) => {\n                    let nodes = [];\n\n                    for(let i = 0; i < rows; i++) {\n                        let node = {\n                            key: (first + i),\n                            data: {\n                                name: \'Item \' + (first + i),\n                                size: Math.floor(Math.random() * 1000) + 1 + \'kb\',\n                                type: \'Type \' + (first + i)\n                            },\n                            leaf: false\n                        };\n\n                        nodes.push(node);\n                    }\n\n                    return nodes;\n                }\n\n                return { nodes, rows, loading, totalRecords, onExpand, onPage, loadNodes }\n            },\n            components: {\n                "p-treetable": primevue.treetable,\n                "p-column": primevue.column\n            }\n        };\n        \n        createApp(App)\n            .use(primevue.config.default)\n            .mount("#app");\n        <\\/script>\n'}}}},mounted:function(){var n=this;this.loading=!0,setTimeout((function(){n.loading=!1,n.nodes=n.loadNodes(0,n.rows),n.totalRecords=1e3}),1e3)},methods:{onExpand:function(n){var e=this;n.children||(this.loading=!0,setTimeout((function(){var o=Object(i["a"])({},n);o.children=[{data:{name:o.data.name+" - 0",size:Math.floor(1e3*Math.random())+1+"kb",type:"File"}},{data:{name:o.data.name+" - 1",size:Math.floor(1e3*Math.random())+1+"kb",type:"File"}}];var a=e.nodes.map((function(e){return e.key===n.key&&(e=o),e}));e.loading=!1,e.nodes=a}),250))},onPage:function(n){var e=this;this.loading=!0,setTimeout((function(){e.loading=!1,e.nodes=e.loadNodes(n.first,e.rows)}),1e3)},loadNodes:function(n,e){for(var o=[],a=0;a<e;a++){var t={key:n+a,data:{name:"Item "+(n+a),size:Math.floor(1e3*Math.random())+1+"kb",type:"Type "+(n+a)},leaf:!1};o.push(t)}return o}}}),c=o("6b0d"),p=o.n(c);const m=p()(u,[["render",r]]);e["default"]=m}}]);