(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0e8871"],{"8a3e":function(e,n,t){"use strict";t.r(n);var r=t("7a23"),l={class:"content-section introduction"},a=Object(r["k"])("div",{class:"feature-intro"},[Object(r["k"])("h1",null,"ProgressBar"),Object(r["k"])("p",null,"ProgressBar is a process status indicator.")],-1),s={class:"content-section implementation"},o={class:"card"},u=Object(r["k"])("h5",null,"Dynamic",-1),c=Object(r["k"])("h5",null,"Static",-1),i=Object(r["k"])("h5",null,"Indeterminate",-1);function b(e,n,t,b,d,p){var j=Object(r["P"])("AppDemoActions"),v=Object(r["P"])("ProgressBar"),O=Object(r["P"])("ProgressBarDoc");return Object(r["H"])(),Object(r["j"])("div",null,[Object(r["k"])("div",l,[a,Object(r["o"])(j)]),Object(r["k"])("div",s,[Object(r["k"])("div",o,[u,Object(r["o"])(v,{value:d.value1},null,8,["value"]),c,Object(r["o"])(v,{value:d.value2,showValue:!1},null,8,["value"]),i,Object(r["o"])(v,{mode:"indeterminate",style:{height:".5em"}})])]),Object(r["o"])(O)])}var d=Object(r["k"])("h5",null,"Import via Module",-1),p=Object(r["k"])("code",null,"\nimport ProgressBar from 'primevue/progressbar';\n\n",-1),j=[p],v=Object(r["k"])("h5",null,"Import via CDN",-1),O=Object(r["k"])("code",null,'\n<script src="https://unpkg.com/primevue@^3/core/core.min.js"><\/script>\n\n',-1),m=[O],h=Object(r["k"])("h5",null,"Getting Started",-1),k=Object(r["k"])("p",null,'ProgressBar has two modes; "determinate" (default) and "indeterminate". In determinate mode, a value between 0 and 100 is required to display the progress.',-1),g=Object(r["k"])("code",null,'\n<ProgressBar :value="value" />\n\n',-1),f=[g],P=Object(r["k"])("code",null,"\ndata() {\n\treturn {\n\t\tvalue: 0\n\t}\n}\n\n",-1),w=[P],B=Object(r["k"])("p",null,[Object(r["n"])("Indeterminate is simplly enabled using "),Object(r["k"])("i",null,"mode"),Object(r["n"])(" property.")],-1),y=Object(r["k"])("code",null,'\n<ProgressBar mode="indeterminate"/>\n\n',-1),I=[y],V=Object(r["k"])("h5",null,"Slot",-1),D=Object(r["k"])("p",null,"A custom label can be placed inside the progress bar via the default slot.",-1),M=Object(r["k"])("code",null,[Object(r["k"])("template",null,[Object(r["n"])('\n<ProgressBar :value="value">\n    Percent Complete: {{value}}%\n</ProgressBar>\n')]),Object(r["n"])("\n")],-1),A=[M],S=Object(r["k"])("h5",null,"Properties",-1),H=Object(r["k"])("p",null,"Any property as style and class are passed to the main container element. Following are the additional properties to configure the component.",-1),C=Object(r["k"])("div",{class:"doc-tablewrapper"},[Object(r["k"])("table",{class:"doc-table"},[Object(r["k"])("thead",null,[Object(r["k"])("tr",null,[Object(r["k"])("th",null,"Name"),Object(r["k"])("th",null,"Type"),Object(r["k"])("th",null,"Default"),Object(r["k"])("th",null,"Description")])]),Object(r["k"])("tbody",null,[Object(r["k"])("tr",null,[Object(r["k"])("td",null,"value"),Object(r["k"])("td",null,"number"),Object(r["k"])("td",null,"null"),Object(r["k"])("td",null,"Current value of the progress.")]),Object(r["k"])("tr",null,[Object(r["k"])("td",null,"mode"),Object(r["k"])("td",null,"string"),Object(r["k"])("td",null,"determinate"),Object(r["k"])("td",null,'Defines the mode of the progress, valid values are "determinate" and "indeterminate".')]),Object(r["k"])("tr",null,[Object(r["k"])("td",null,"showValue"),Object(r["k"])("td",null,"boolean"),Object(r["k"])("td",null,"true"),Object(r["k"])("td",null,"Whether to display the progress bar value.")])])])],-1),N=Object(r["k"])("h5",null,"Styling",-1),U=Object(r["n"])("Following is the list of structural style classes, for theming classes visit "),x=Object(r["n"])("theming"),E=Object(r["n"])(" page."),F=Object(r["k"])("div",{class:"doc-tablewrapper"},[Object(r["k"])("table",{class:"doc-table"},[Object(r["k"])("thead",null,[Object(r["k"])("tr",null,[Object(r["k"])("th",null,"Name"),Object(r["k"])("th",null,"Element")])]),Object(r["k"])("tbody",null,[Object(r["k"])("tr",null,[Object(r["k"])("td",null,"p-progressbar"),Object(r["k"])("td",null,"Container element.")]),Object(r["k"])("tr",null,[Object(r["k"])("td",null,"p-progressbar-determinate"),Object(r["k"])("td",null,"Container element of a determinate progressbar.")]),Object(r["k"])("tr",null,[Object(r["k"])("td",null,"p-progressbar-indeterminate"),Object(r["k"])("td",null,"Container element of an indeterminate progressbar.")]),Object(r["k"])("tr",null,[Object(r["k"])("td",null,"p-progressbar-value"),Object(r["k"])("td",null,"Element whose width changes according to value.")]),Object(r["k"])("tr",null,[Object(r["k"])("td",null,"p-progressbar-label"),Object(r["k"])("td",null,"Label element that displays the current value.")])])])],-1),J=Object(r["k"])("h5",null,"Dependencies",-1),Z=Object(r["k"])("p",null,"None.",-1);function _(e,n,t,l,a,s){var o=Object(r["P"])("router-link"),u=Object(r["P"])("AppDoc"),c=Object(r["Q"])("code");return Object(r["H"])(),Object(r["h"])(u,{name:"ProgressBarDemo",sources:a.sources,github:"progressbar/ProgressBarDemo.vue"},{default:Object(r["Z"])((function(){return[d,Object(r["ab"])((Object(r["H"])(),Object(r["j"])("pre",null,j)),[[c,void 0,void 0,{script:!0}]]),v,Object(r["ab"])((Object(r["H"])(),Object(r["j"])("pre",null,m)),[[c]]),h,k,Object(r["ab"])((Object(r["H"])(),Object(r["j"])("pre",null,f)),[[c]]),Object(r["ab"])((Object(r["H"])(),Object(r["j"])("pre",null,w)),[[c,void 0,void 0,{script:!0}]]),B,Object(r["ab"])((Object(r["H"])(),Object(r["j"])("pre",null,I)),[[c]]),V,D,Object(r["ab"])((Object(r["H"])(),Object(r["j"])("pre",null,A)),[[c]]),S,H,C,N,Object(r["k"])("p",null,[U,Object(r["o"])(o,{to:"/theming"},{default:Object(r["Z"])((function(){return[x]})),_:1}),E]),F,J,Z]})),_:1},8,["sources"])}var q={data:function(){return{sources:{"options-api":{tabName:"Options API Source",content:'\n<template>\n    <div>\n        <h5>Dynamic</h5>\n        <ProgressBar :value="value1" />\n\n        <h5>Static</h5>\n        <ProgressBar :value="value2" :showValue="false" />\n\n        <h5>Indeterminate</h5>\n        <ProgressBar mode="indeterminate" style="height: .5em" />\n    </div>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            value1: 0,\n            value2: 50\n        }\n    },\n    interval: null,\n    methods: {\n        startProgress() {\n            this.interval = setInterval(() => {\n                let newValue = this.value1 + Math.floor(Math.random() * 10) + 1;\n                if (newValue >= 100) {\n                    newValue = 100;\n                }\n                this.value1 = newValue;\n            }, 2000);\n        },\n        endProgress() {\n            clearInterval(this.interval);\n            this.interval = null;\n        }\n    },\n    mounted() {\n        this.startProgress();\n    },\n    beforeUnmount() {\n        this.endProgress();\n    }\n}\n<\\/script>\n'},"composition-api":{tabName:"Composition API Source",content:'\n<template>\n    <div>\n        <h5>Dynamic</h5>\n        <ProgressBar :value="value1" />\n\n        <h5>Static</h5>\n        <ProgressBar :value="value2" :showValue="false" />\n\n        <h5>Indeterminate</h5>\n        <ProgressBar mode="indeterminate" style="height: .5em" />\n    </div>\n</template>\n\n<script>\nimport { ref, onMounted, onBeforeUnmount } from \'vue\';\n\nexport default {\n    setup() {\n        onMounted(() => {\n            startProgress();\n        })\n\n        onBeforeUnmount(() => {\n            endProgress();\n        })\n        \n        const value1 = ref(0);\n        const value2 = ref(50);\n        const interval = ref(null);\n        const startProgress = () => {\n            interval.value = setInterval(() => {\n                let newValue = value1.value + Math.floor(Math.random() * 10) + 1;\n                if (newValue >= 100) {\n                    newValue = 100;\n                }\n                value1.value = newValue;\n            }, 2000);\n        };\n        const endProgress = () => {\n            clearInterval(interval.value);\n            interval.value = null;\n        };\n\n        return { value1, value2 }\n    }\n}\n<\\/script>'},"browser-source":{tabName:"Browser Source",content:'<div id="app">\n            <h5>Dynamic</h5>\n            <p-progressbar :value="value1"></p-progressbar>\n\n            <h5>Static</h5>\n            <p-progressbar :value="value2" :show-value="false"></p-progressbar>\n\n            <h5>Indeterminate</h5>\n            <p-progressbar mode="indeterminate" style="height: .5em"></p-progressbar>\n        </div>\n\n        <script type="module">\n        const { createApp, ref, onMounted, onBeforeUnmount } = Vue;\n\n        const App = {\n            setup() {\n                onMounted(() => {\n                    startProgress();\n                })\n\n                onBeforeUnmount(() => {\n                    endProgress();\n                })\n                \n                const value1 = ref(0);\n                const value2 = ref(50);\n                const interval = ref(null);\n                const startProgress = () => {\n                    interval.value = setInterval(() => {\n                        let newValue = value1.value + Math.floor(Math.random() * 10) + 1;\n                        if (newValue >= 100) {\n                            newValue = 100;\n                        }\n                        value1.value = newValue;\n                    }, 2000);\n                };\n                const endProgress = () => {\n                    clearInterval(interval.value);\n                    interval.value = null;\n                };\n\n                return { value1, value2 }\n            },\n            components: {\n                "p-progressbar": primevue.progressbar\n            }\n        };\n\n        createApp(App)\n            .use(primevue.config.default)\n            .mount("#app");\n        <\\/script>'}}}}},G=t("6b0d"),L=t.n(G);const Q=L()(q,[["render",_]]);var T=Q,W={data:function(){return{value1:0,value2:50}},interval:null,methods:{startProgress:function(){var e=this;this.interval=setInterval((function(){var n=e.value1+Math.floor(10*Math.random())+1;n>=100&&(n=100),e.value1=n}),2e3)},endProgress:function(){clearInterval(this.interval),this.interval=null}},mounted:function(){this.startProgress()},beforeUnmount:function(){this.endProgress()},components:{ProgressBarDoc:T}};const z=L()(W,[["render",b]]);n["default"]=z}}]);