(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0b9d48"],{"352b":function(e,t,n){"use strict";n.r(t);var o=n("7a23"),r={class:"content-section introduction"},i=Object(o["k"])("div",{class:"feature-intro"},[Object(o["k"])("h1",null,[Object(o["n"])("TreeTable "),Object(o["k"])("span",null,"Templating")]),Object(o["k"])("p",null,"Custom content at header, body and footer sections are supported via templating.")],-1),c={class:"content-section implementation"},a={class:"card"},p=Object(o["n"])(" FileSystem "),l={style:{"text-align":"left"}};function s(e,t,n,s,u,d){var m=Object(o["P"])("AppDemoActions"),b=Object(o["P"])("Column"),v=Object(o["P"])("Button"),h=Object(o["P"])("TreeTable"),f=Object(o["P"])("AppDoc");return Object(o["H"])(),Object(o["j"])("div",null,[Object(o["k"])("div",r,[i,Object(o["o"])(m)]),Object(o["k"])("div",c,[Object(o["k"])("div",a,[Object(o["o"])(h,{value:u.nodes},{header:Object(o["Z"])((function(){return[p]})),footer:Object(o["Z"])((function(){return[Object(o["k"])("div",l,[Object(o["o"])(v,{icon:"pi pi-refresh"})])]})),default:Object(o["Z"])((function(){return[Object(o["o"])(b,{field:"name",header:"Name",expander:!0}),Object(o["o"])(b,{field:"size",header:"Size"}),Object(o["o"])(b,{field:"type",header:"Type"}),Object(o["o"])(b,{headerStyle:"width: 10rem",headerClass:"text-center",bodyClass:"text-center"},{header:Object(o["Z"])((function(){return[Object(o["o"])(v,{type:"button",icon:"pi pi-cog"})]})),body:Object(o["Z"])((function(){return[Object(o["o"])(v,{type:"button",icon:"pi pi-search",class:"p-button-success",style:{"margin-right":".5em"}}),Object(o["o"])(v,{type:"button",icon:"pi pi-pencil",class:"p-button-warning"})]})),_:1})]})),_:1},8,["value"])])]),Object(o["o"])(f,{name:"TreeTableTemplatingDemo",sources:u.sources,service:["NodeService"],data:["treetablenodes"],github:"treetable/TreeTableTemplatingDemo.vue"},null,8,["sources"])])}var u=n("82f4"),d={data:function(){return{nodes:null,sources:{"options-api":{tabName:"Options API Source",content:'\n<template>\n    <div>\n        <TreeTable :value="nodes">\n            <template #header>\n                FileSystem\n            </template>\n            <Column field="name" header="Name" :expander="true"></Column>\n            <Column field="size" header="Size"></Column>\n            <Column field="type" header="Type"></Column>\n            <Column headerStyle="width: 10rem" headerClass="text-center" bodyClass="text-center">\n                <template #header>\n                    <Button type="button" icon="pi pi-cog"></Button>\n                </template>\n                <template #body>\n                    <Button type="button" icon="pi pi-search" class="p-button-success" style="margin-right: .5em"></Button>\n                    <Button type="button" icon="pi pi-pencil" class="p-button-warning"></Button>\n                </template>\n            </Column>\n            <template #footer>\n                <div style="text-align:left">\n                    <Button icon="pi pi-refresh" />\n                </div>\n            </template>\n        </TreeTable>\n    </div>                  \n</template>\n\n<script>\nimport NodeService from \'./service/NodeService\';\n\nexport default {\n    data() {\n        return {\n            nodes: null\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n    },\n    mounted() {\n        this.nodeService.getTreeTableNodes().then(data => this.nodes = data);\n    }\n}\n<\\/script>\n'},"composition-api":{tabName:"Composition API Source",content:'\n<template>\n    <div>\n        <TreeTable :value="nodes">\n            <template #header>\n                FileSystem\n            </template>\n            <Column field="name" header="Name" :expander="true"></Column>\n            <Column field="size" header="Size"></Column>\n            <Column field="type" header="Type"></Column>\n            <Column headerStyle="width: 10rem" headerClass="text-center" bodyClass="text-center">\n                <template #header>\n                    <Button type="button" icon="pi pi-cog"></Button>\n                </template>\n                <template #body>\n                    <Button type="button" icon="pi pi-search" class="p-button-success" style="margin-right: .5em"></Button>\n                    <Button type="button" icon="pi pi-pencil" class="p-button-warning"></Button>\n                </template>\n            </Column>\n            <template #footer>\n                <div style="text-align:left">\n                    <Button icon="pi pi-refresh" />\n                </div>\n            </template>\n        </TreeTable>\n    </div>                  \n</template>\n\n<script>\nimport { ref, onMounted } from \'vue\';\nimport NodeService from \'./service/NodeService\';\n\nexport default {\n    setup() {\n        onMounted(() => {\n            nodeService.value.getTreeTableNodes().then(data => nodes.value = data);\n        })\n\n        const nodes = ref();\n        const nodeService = ref(new NodeService());\n\n        return { nodes, nodeService }\n    }\n}\n<\\/script>\n'},"browser-source":{tabName:"Browser Source",imports:'<script src="https://unpkg.com/primevue@^3/treetable/treetable.min.js"><\\/script>\n        <script src="https://unpkg.com/primevue@^3/column/column.min.js"><\\/script>\n        <script src="./NodeService.js"><\\/script>',content:'<div id="app">\n            <p-treetable :value="nodes">\n                <template #header>\n                    FileSystem\n                </template>\n                <p-column field="name" header="Name" :expander="true"></p-column>\n                <p-column field="size" header="Size"></p-column>\n                <p-column field="type" header="Type"></p-column>\n                <p-column header-style="width: 10rem" header-class="text-center" body-class="text-center">\n                    <template #header>\n                        <p-button type="button" icon="pi pi-cog"></p-button>\n                    </template>\n                    <template #body>\n                        <p-button type="button" icon="pi pi-search" class="p-button-success" style="margin-right: .5em"></p-button>\n                        <p-button type="button" icon="pi pi-pencil" class="p-button-warning"></p-button>\n                    </template>\n                </p-column>\n                <template #footer>\n                    <div style="text-align:left">\n                        <p-button icon="pi pi-refresh"></p-button>\n                    </div>\n                </template>\n            </p-treetable>\n        </div>                  \n\n        <script type="module">\n        const { createApp, ref, onMounted } = Vue;\n\n        const App = {\n            setup() {\n                onMounted(() => {\n                    nodeService.value.getTreeTableNodes().then(data => nodes.value = data);\n                })\n\n                const nodes = ref();\n                const nodeService = ref(new NodeService());\n\n                return { nodes, nodeService }\n            },\n            components: {\n                "p-treetable": primevue.treetable,\n                "p-column": primevue.column,\n                "p-button": primevue.button\n            }\n        };\n\n        createApp(App)\n            .use(primevue.config.default)\n            .mount("#app");\n        <\\/script>\n'}}}},nodeService:null,created:function(){this.nodeService=new u["a"]},mounted:function(){var e=this;this.nodeService.getTreeTableNodes().then((function(t){return e.nodes=t}))}},m=n("6b0d"),b=n.n(m);const v=b()(d,[["render",s]]);t["default"]=v}}]);