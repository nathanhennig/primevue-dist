(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0e5440"],{"946e":function(e,n,t){"use strict";t.r(n);var a=t("7a23"),o={class:"content-section introduction"},r=Object(a["k"])("div",{class:"feature-intro"},[Object(a["k"])("h1",null,[Object(a["n"])("TreeTable "),Object(a["k"])("span",null,"Paginator")]),Object(a["k"])("p",null,"Pagination is enabled by setting paginator property to true and defining the rows attribute as the number of root level nodes per page.")],-1),i={class:"content-section implementation"},l={class:"card"};function p(e,n,t,p,s,d){var c=Object(a["P"])("AppDemoActions"),u=Object(a["P"])("Column"),m=Object(a["P"])("TreeTable"),b=Object(a["P"])("AppDoc");return Object(a["H"])(),Object(a["j"])("div",null,[Object(a["k"])("div",o,[r,Object(a["o"])(c)]),Object(a["k"])("div",i,[Object(a["k"])("div",l,[Object(a["o"])(m,{value:s.nodes,paginator:!0,rows:10},{default:Object(a["Z"])((function(){return[Object(a["o"])(u,{field:"name",header:"Name",expander:!0}),Object(a["o"])(u,{field:"size",header:"Size"}),Object(a["o"])(u,{field:"type",header:"Type"})]})),_:1},8,["value"])])]),Object(a["o"])(b,{name:"TreeTablePaginatorDemo",sources:s.sources,service:["NodeService"],data:["treetablenodes"],github:"treetable/TreeTablePaginatorDemo.vue"},null,8,["sources"])])}var s={data:function(){return{nodes:null,sources:{"options-api":{tabName:"Options API Source",content:'\n<template>\n    <div>\n        <TreeTable :value="nodes" :paginator="true" :rows="10">\n            <Column field="name" header="Name" :expander="true"></Column>\n            <Column field="size" header="Size"></Column>\n            <Column field="type" header="Type"></Column>\n        </TreeTable>\n    </div>                 \n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            nodes: null\n        }\n    },\n    created() {\n        let files = [];\n        for(let i = 0; i < 50; i++) {\n            let node = {\n                key: i,\n                data: {\n                    name: \'Item \' + i,\n                    size: Math.floor(Math.random() * 1000) + 1 + \'kb\',\n                    type: \'Type \' + i\n                },\n                children: [\n                    {\n                        key: i + \' - 0\',\n                        data: {\n                            name: \'Item \' + i + \' - 0\',\n                            size: Math.floor(Math.random() * 1000) + 1 + \'kb\',\n                            type: \'Type \' + i\n                        }\n                    }\n                ]\n            };\n\n            files.push(node);\n        }\n\n        this.nodes = files;\n    }\n}\n<\\/script>\n'},"composition-api":{tabName:"Composition API Source",content:'\n<template>\n    <div>\n        <TreeTable :value="nodes" :paginator="true" :rows="10">\n            <Column field="name" header="Name" :expander="true"></Column>\n            <Column field="size" header="Size"></Column>\n            <Column field="type" header="Type"></Column>\n        </TreeTable>\n    </div>                 \n</template>\n\n<script>\nimport { ref } from \'vue\';\n\nexport default {\n    setup() {\n        let files = [];\n        for(let i = 0; i < 50; i++) {\n            let node = {\n                key: i,\n                data: {\n                    name: \'Item \' + i,\n                    size: Math.floor(Math.random() * 1000) + 1 + \'kb\',\n                    type: \'Type \' + i\n                },\n                children: [\n                    {\n                        key: i + \' - 0\',\n                        data: {\n                            name: \'Item \' + i + \' - 0\',\n                            size: Math.floor(Math.random() * 1000) + 1 + \'kb\',\n                            type: \'Type \' + i\n                        }\n                    }\n                ]\n            };\n\n            files.push(node);\n        }\n\n        const nodes = ref(files);\n\n        return { nodes }\n    }\n}\n<\\/script>\n'},"browser-source":{tabName:"Browser Source",imports:'<script src="https://unpkg.com/primevue@^3/treetable/treetable.min.js"><\\/script>\n        <script src="https://unpkg.com/primevue@^3/column/column.min.js"><\\/script>\n        <script src="./NodeService.js"><\\/script>',content:'<div id="app">\n            <p-treetable :value="nodes" :paginator="true" :rows="10">\n                <p-column field="name" header="Name" :expander="true"></p-column>\n                <p-column field="size" header="Size"></p-column>\n                <p-column field="type" header="Type"></p-column>\n            </p-treetable>\n        </div>                 \n\n        <script type="module">\n        const { createApp, ref, onMounted } = Vue;\n\n        const App = {\n            setup() {\n                let files = [];\n                for(let i = 0; i < 50; i++) {\n                    let node = {\n                        key: i,\n                        data: {\n                            name: \'Item \' + i,\n                            size: Math.floor(Math.random() * 1000) + 1 + \'kb\',\n                            type: \'Type \' + i\n                        },\n                        children: [\n                            {\n                                key: i + \' - 0\',\n                                data: {\n                                    name: \'Item \' + i + \' - 0\',\n                                    size: Math.floor(Math.random() * 1000) + 1 + \'kb\',\n                                    type: \'Type \' + i\n                                }\n                            }\n                        ]\n                    };\n\n                    files.push(node);\n                }\n\n                const nodes = ref(files);\n\n                return { nodes }\n            },\n            components: {\n                "p-treetable": primevue.treetable,\n                "p-column": primevue.column\n            }\n        };\n\n        createApp(App)\n            .use(primevue.config.default)\n            .mount("#app");\n        <\\/script>\n'}}}},created:function(){for(var e=[],n=0;n<50;n++){var t={key:n,data:{name:"Item "+n,size:Math.floor(1e3*Math.random())+1+"kb",type:"Type "+n},children:[{key:n+" - 0",data:{name:"Item "+n+" - 0",size:Math.floor(1e3*Math.random())+1+"kb",type:"Type "+n}}]};e.push(t)}this.nodes=e}},d=t("6b0d"),c=t.n(d);const u=c()(s,[["render",p]]);n["default"]=u}}]);