(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-097e703a"],{"1e14":function(e,n,t){var s=t("877c");s.__esModule&&(s=s.default),"string"===typeof s&&(s=[[e.i,s,""]]),s.locals&&(e.exports=s.locals);var o=t("499e").default;o("48932f58",s,!0,{sourceMap:!1,shadowMode:!1})},"3be8":function(e,n,t){"use strict";t.r(n);var s=t("7a23"),o=function(e){return Object(s["K"])("data-v-3e13ce68"),e=e(),Object(s["I"])(),e},l={class:"content-section introduction"},c=o((function(){return Object(s["k"])("div",{class:"feature-intro"},[Object(s["k"])("h1",null,[Object(s["n"])("Tree "),Object(s["k"])("span",null,"Selection")]),Object(s["k"])("p",null,[Object(s["n"])("Tree supports "),Object(s["k"])("b",null,"single"),Object(s["n"])(", "),Object(s["k"])("b",null,"multiple"),Object(s["n"])(" and "),Object(s["k"])("b",null,"checkbox"),Object(s["n"])(" as selection modes.")])],-1)})),d={class:"content-section implementation"},i={class:"card"},r=o((function(){return Object(s["k"])("h5",null,"Single Selection",-1)})),u=o((function(){return Object(s["k"])("h5",null,"Multiple Selection with MetaKey",-1)})),a=o((function(){return Object(s["k"])("h5",null,"Multiple Selection without MetaKey",-1)})),y=o((function(){return Object(s["k"])("h5",null,"Checkbox Selection",-1)})),v=o((function(){return Object(s["k"])("h5",null,"Events",-1)}));function p(e,n,t,o,p,m){var K=Object(s["P"])("AppDemoActions"),h=Object(s["P"])("Tree"),f=Object(s["P"])("AppDoc");return Object(s["H"])(),Object(s["j"])("div",null,[Object(s["k"])("div",l,[c,Object(s["o"])(K)]),Object(s["k"])("div",d,[Object(s["k"])("div",i,[r,Object(s["o"])(h,{value:p.nodes,selectionMode:"single",selectionKeys:p.selectedKey1,"onUpdate:selectionKeys":n[0]||(n[0]=function(e){return p.selectedKey1=e})},null,8,["value","selectionKeys"]),u,Object(s["o"])(h,{value:p.nodes,selectionMode:"multiple",selectionKeys:p.selectedKeys1,"onUpdate:selectionKeys":n[1]||(n[1]=function(e){return p.selectedKeys1=e})},null,8,["value","selectionKeys"]),a,Object(s["o"])(h,{value:p.nodes,selectionMode:"multiple",selectionKeys:p.selectedKeys2,"onUpdate:selectionKeys":n[2]||(n[2]=function(e){return p.selectedKeys2=e}),metaKeySelection:!1},null,8,["value","selectionKeys"]),y,Object(s["o"])(h,{value:p.nodes,selectionMode:"checkbox",selectionKeys:p.selectedKeys3,"onUpdate:selectionKeys":n[3]||(n[3]=function(e){return p.selectedKeys3=e})},null,8,["value","selectionKeys"]),v,Object(s["o"])(h,{value:p.nodes,selectionMode:"single",selectionKeys:p.selectedKey2,"onUpdate:selectionKeys":n[4]||(n[4]=function(e){return p.selectedKey2=e}),metaKeySelection:!1,onNodeSelect:m.onNodeSelect,onNodeUnselect:m.onNodeUnselect},null,8,["value","selectionKeys","onNodeSelect","onNodeUnselect"])])]),Object(s["o"])(f,{name:"TreeSelectionDemo",sources:p.sources,service:["NodeService"],data:["treenodes"],github:"tree/TreeSelectionDemo.vue"},null,8,["sources"])])}var m=t("82f4"),K={data:function(){return{selectedKey1:null,selectedKey2:null,selectedKeys1:null,selectedKeys2:null,selectedKeys3:null,nodes:null,sources:{"options-api":{tabName:"Options API Source",content:'\n<template>\n    <div>\n        <Toast />\n\n        <h5>Single Selection</h5>\n        <Tree :value="nodes" selectionMode="single" v-model:selectionKeys="selectedKey1"></Tree>\n\n        <h5>Multiple Selection with MetaKey</h5>\n        <Tree :value="nodes" selectionMode="multiple" v-model:selectionKeys="selectedKeys1"></Tree>\n\n        <h5>Multiple Selection without MetaKey</h5>\n        <Tree :value="nodes" selectionMode="multiple" v-model:selectionKeys="selectedKeys2" :metaKeySelection="false"></Tree>\n\n        <h5>Checkbox Selection</h5>\n        <Tree :value="nodes" selectionMode="checkbox" v-model:selectionKeys="selectedKeys3"></Tree>\n\n        <h5>Events</h5>\n        <Tree :value="nodes" selectionMode="single" v-model:selectionKeys="selectedKey2" :metaKeySelection="false"\n            @nodeSelect="onNodeSelect" @nodeUnselect="onNodeUnselect"></Tree>\n    </div>\n</template>\n\n<script>\nimport NodeService from \'./service/NodeService\';\n\nexport default {\n    data() {\n        return {\n            selectedKey1: null,\n            selectedKey2: null,\n            selectedKeys1: null,\n            selectedKeys2: null,\n            selectedKeys3: null,\n            nodes: null\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n    },\n    mounted() {\n        this.nodeService.getTreeNodes().then(data => this.nodes = data);\n    },\n    methods: {\n        onNodeSelect(node) {\n            this.$toast.add({severity:\'success\', summary: \'Node Selected\', detail: node.label, life: 3000});\n        },\n        onNodeUnselect(node) {\n            this.$toast.add({severity:\'success\', summary: \'Node Unselected\', detail: node.label, life: 3000});\n        }\n    }\n}\n<\\/script>\n'},"composition-api":{tabName:"Composition API Source",content:'\n<template>\n    <div>\n        <Toast />\n\n        <h5>Single Selection</h5>\n        <Tree :value="nodes" selectionMode="single" v-model:selectionKeys="selectedKey1"></Tree>\n\n        <h5>Multiple Selection with MetaKey</h5>\n        <Tree :value="nodes" selectionMode="multiple" v-model:selectionKeys="selectedKeys1"></Tree>\n\n        <h5>Multiple Selection without MetaKey</h5>\n        <Tree :value="nodes" selectionMode="multiple" v-model:selectionKeys="selectedKeys2" :metaKeySelection="false"></Tree>\n\n        <h5>Checkbox Selection</h5>\n        <Tree :value="nodes" selectionMode="checkbox" v-model:selectionKeys="selectedKeys3"></Tree>\n\n        <h5>Events</h5>\n        <Tree :value="nodes" selectionMode="single" v-model:selectionKeys="selectedKey2" :metaKeySelection="false"\n            @nodeSelect="onNodeSelect" @nodeUnselect="onNodeUnselect"></Tree>\n    </div>\n</template>\n\n<script>\nimport { ref, onMounted } from \'vue\';\nimport { useToast } from \'primevue/usetoast\';\nimport NodeService from \'./service/NodeService\';\n\nexport default {\n    setup() {\n        onMounted(() => {\n            nodeService.value.getTreeNodes().then(data => nodes.value = data);\n        })\n\n        const toast = useToast();\n        const selectedKey1 = ref(null);\n        const selectedKey2 = ref(null);\n        const selectedKeys1 = ref(null);\n        const selectedKeys2 = ref(null);\n        const selectedKeys3 = ref(null);\n        const nodes = ref(null);\n        const nodeService = ref(new NodeService());\n        const onNodeSelect = (node) => {\n            toast.add({severity:\'success\', summary: \'Node Selected\', detail: node.label, life: 3000});\n        };\n        const onNodeUnselect = (node) => {\n            toast.add({severity:\'success\', summary: \'Node Unselected\', detail: node.label, life: 3000});\n        };\n\n        return { selectedKey1, selectedKey2, selectedKeys1, selectedKeys2, selectedKeys3, nodes, nodeService, onNodeSelect, onNodeUnselect }\n    }\n}\n<\\/script>'},"browser-source":{tabName:"Browser Source",imports:'<script src="https://unpkg.com/primevue@^3/toast/toast.min.js"><\\/script>\n        <script src="https://unpkg.com/primevue@^3/toastservice/toastservice.min.js"><\\/script>\n        <script src="./NodeService.js"><\\/script>',content:'<div id="app">\n            <p-toast></p-toast>\n\n            <h5>Single Selection</h5>\n            <p-tree :value="nodes" selection-mode="single" v-model:selection-keys="selectedKey1"></p-tree>\n\n            <h5>Multiple Selection with MetaKey</h5>\n            <p-tree :value="nodes" selection-mode="multiple" v-model:selection-keys="selectedKeys1"></p-tree>\n\n            <h5>Multiple Selection without MetaKey</h5>\n            <p-tree :value="nodes" selection-mode="multiple" v-model:selection-keys="selectedKeys2" :meta-key-selection="false"></p-tree>\n\n            <h5>Checkbox Selection</h5>\n            <p-tree :value="nodes" selection-mode="checkbox" v-model:selection-keys="selectedKeys3"></p-tree>\n\n            <h5>Events</h5>\n            <p-tree :value="nodes" selection-mode="single" v-model:selection-keys="selectedKey2" :meta-key-delection="false"\n                @node-select="onNodeSelect" @node-unselect="onNodeUnselect"></p-tree>\n        </div>\n\n        <script type="module">\n        const { createApp, ref, onMounted } = Vue;\n        const { useToast } = primevue.usetoast;\n\n        const App = {\n            setup() {\n                onMounted(() => {\n                    nodeService.value.getTreeNodes().then(data => nodes.value = data);\n                })\n\n                const toast = useToast();\n                const selectedKey1 = ref(null);\n                const selectedKey2 = ref(null);\n                const selectedKeys1 = ref(null);\n                const selectedKeys2 = ref(null);\n                const selectedKeys3 = ref(null);\n                const nodes = ref(null);\n                const nodeService = ref(new NodeService());\n                const onNodeSelect = (node) => {\n                    toast.add({severity:\'success\', summary: \'Node Selected\', detail: node.label, life: 3000});\n                };\n                const onNodeUnselect = (node) => {\n                    toast.add({severity:\'success\', summary: \'Node Unselected\', detail: node.label, life: 3000});\n                };\n\n                return { selectedKey1, selectedKey2, selectedKeys1, selectedKeys2, selectedKeys3, nodes, nodeService, onNodeSelect, onNodeUnselect }\n            },\n            components: {\n                "p-tree": primevue.tree,\n                "p-toast": primevue.toast\n            }\n        };\n\n        createApp(App)\n            .use(primevue.config.default)\n            .use(primevue.toastservice)\n            .mount("#app");\n        <\\/script>'}}}},nodeService:null,created:function(){this.nodeService=new m["a"]},mounted:function(){var e=this;this.nodeService.getTreeNodes().then((function(n){return e.nodes=n}))},methods:{onNodeSelect:function(e){this.$toast.add({severity:"success",summary:"Node Selected",detail:e.label,life:3e3})},onNodeUnselect:function(e){this.$toast.add({severity:"success",summary:"Node Unselected",detail:e.label,life:3e3})}}},h=(t("f555"),t("6b0d")),f=t.n(h);const S=f()(K,[["render",p],["__scopeId","data-v-3e13ce68"]]);n["default"]=S},"877c":function(e,n,t){var s=t("24fb");n=s(!1),n.push([e.i,"button[data-v-3e13ce68]{margin-right:.5rem}",""]),e.exports=n},f555:function(e,n,t){"use strict";t("1e14")}}]);