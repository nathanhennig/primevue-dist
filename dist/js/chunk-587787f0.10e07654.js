(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-587787f0"],{"1d97":function(e,t,n){"use strict";n("436a")},"436a":function(e,t,n){var l=n("69b9");l.__esModule&&(l=l.default),"string"===typeof l&&(l=[[e.i,l,""]]),l.locals&&(e.exports=l.locals);var a=n("499e").default;a("01523020",l,!0,{sourceMap:!1,shadowMode:!1})},"62ae":function(e,t,n){"use strict";n.r(t);var l=n("7a23"),a=function(e){return Object(l["K"])("data-v-33586427"),e=e(),Object(l["I"])(),e},o={class:"content-section introduction"},d=a((function(){return Object(l["k"])("div",{class:"feature-intro"},[Object(l["k"])("h1",null,[Object(l["n"])("DataTable "),Object(l["k"])("span",null,"InCell Edit")]),Object(l["k"])("p",null,"In cell editing provides a rapid and user friendly way to manipulate the data. The datatable provides a flexible API so that the editing behavior is implemented by the page author whether it utilizes v-model or vuex. ")],-1)})),i={class:"content-section implementation p-fluid"},r={class:"card"},u=a((function(){return Object(l["k"])("h5",null,"Cell Editing",-1)})),c=a((function(){return Object(l["k"])("p",null,"Validations, dynamic columns and reverting values with the escape key.",-1)})),s={class:"card"},p=a((function(){return Object(l["k"])("h5",null,"Row Editing",-1)})),m={class:"card"},f=a((function(){return Object(l["k"])("h5",null,"Cell Editing with Sorting and Filter",-1)}));function v(e,t,n,a,v,h){var b=Object(l["P"])("AppDemoActions"),S=Object(l["P"])("InputText"),w=Object(l["P"])("Column"),O=Object(l["P"])("DataTable"),y=Object(l["P"])("Dropdown"),C=Object(l["P"])("AppDoc"),g=Object(l["Q"])("tooltip");return Object(l["H"])(),Object(l["j"])("div",null,[Object(l["k"])("div",o,[d,Object(l["o"])(b)]),Object(l["k"])("div",i,[Object(l["k"])("div",r,[u,c,Object(l["o"])(O,{value:v.products1,editMode:"cell",onCellEditComplete:h.onCellEditComplete,class:"editable-cells-table",responsiveLayout:"scroll"},{default:Object(l["Z"])((function(){return[(Object(l["H"])(!0),Object(l["j"])(l["a"],null,Object(l["N"])(v.columns,(function(e){return Object(l["H"])(),Object(l["h"])(w,{field:e.field,header:e.header,key:e.field,style:{width:"25%"}},{editor:Object(l["Z"])((function(e){var t=e.data,n=e.field;return[Object(l["o"])(S,{modelValue:t[n],"onUpdate:modelValue":function(e){return t[n]=e},autofocus:""},null,8,["modelValue","onUpdate:modelValue"])]})),_:2},1032,["field","header"])})),128))]})),_:1},8,["value","onCellEditComplete"])]),Object(l["k"])("div",s,[p,Object(l["o"])(O,{value:v.products2,editMode:"row",dataKey:"id",editingRows:v.editingRows,"onUpdate:editingRows":t[0]||(t[0]=function(e){return v.editingRows=e}),onRowEditSave:h.onRowEditSave,responsiveLayout:"scroll"},{default:Object(l["Z"])((function(){return[Object(l["o"])(w,{field:"code",header:"Code",style:{width:"20%"}},{editor:Object(l["Z"])((function(e){var t=e.data,n=e.field;return[Object(l["o"])(S,{modelValue:t[n],"onUpdate:modelValue":function(e){return t[n]=e},autofocus:""},null,8,["modelValue","onUpdate:modelValue"])]})),_:1}),Object(l["o"])(w,{field:"name",header:"Name",style:{width:"20%"}},{editor:Object(l["Z"])((function(e){var t=e.data,n=e.field;return[Object(l["o"])(S,{modelValue:t[n],"onUpdate:modelValue":function(e){return t[n]=e}},null,8,["modelValue","onUpdate:modelValue"])]})),_:1}),Object(l["o"])(w,{field:"inventoryStatus",header:"Status",style:{width:"20%"}},{editor:Object(l["Z"])((function(e){var t=e.data,n=e.field;return[Object(l["o"])(y,{modelValue:t[n],"onUpdate:modelValue":function(e){return t[n]=e},options:v.statuses,optionLabel:"label",optionValue:"value",placeholder:"Select a Status"},{option:Object(l["Z"])((function(e){return[Object(l["k"])("span",{class:Object(l["A"])("product-badge status-"+e.option.value.toLowerCase())},Object(l["T"])(e.option.label),3)]})),_:2},1032,["modelValue","onUpdate:modelValue","options"])]})),body:Object(l["Z"])((function(e){return[Object(l["n"])(Object(l["T"])(h.getStatusLabel(e.data.inventoryStatus)),1)]})),_:1}),Object(l["o"])(w,{field:"price",header:"Price",style:{width:"20%"}},{editor:Object(l["Z"])((function(e){var t=e.data,n=e.field;return[Object(l["o"])(S,{modelValue:t[n],"onUpdate:modelValue":function(e){return t[n]=e}},null,8,["modelValue","onUpdate:modelValue"])]})),_:1}),Object(l["o"])(w,{rowEditor:!0,style:{width:"10%","min-width":"8rem"},bodyStyle:"text-align:center"})]})),_:1},8,["value","editingRows","onRowEditSave"])]),Object(l["k"])("div",m,[f,Object(l["o"])(O,{value:v.products3,editMode:"cell",onCellEditComplete:h.onCellEditComplete,class:"editable-cells-table",filterDisplay:"row",filters:v.filters,"onUpdate:filters":t[1]||(t[1]=function(e){return v.filters=e}),responsiveLayout:"scroll"},{default:Object(l["Z"])((function(){return[(Object(l["H"])(!0),Object(l["j"])(l["a"],null,Object(l["N"])(v.columns,(function(e){return Object(l["H"])(),Object(l["h"])(w,{field:e.field,header:e.header,key:e.field,style:{width:"25%"},sortable:"",filter:""},{filter:Object(l["Z"])((function(e){var t=e.filterModel,n=e.filterCallback;return[Object(l["ab"])(Object(l["o"])(S,{type:"text",modelValue:t.value,"onUpdate:modelValue":function(e){return t.value=e},onKeydown:Object(l["bb"])((function(e){return n()}),["enter"]),class:"p-column-filter"},null,8,["modelValue","onUpdate:modelValue","onKeydown"]),[[g,"Hit enter key to filter",void 0,{top:!0,focus:!0}]])]})),editor:Object(l["Z"])((function(e){var t=e.data,n=e.field;return[Object(l["o"])(S,{modelValue:t[n],"onUpdate:modelValue":function(e){return t[n]=e},autofocus:""},null,8,["modelValue","onUpdate:modelValue"])]})),_:2},1032,["field","header"])})),128))]})),_:1},8,["value","onCellEditComplete","filters"])])]),Object(l["o"])(C,{name:"DataTableEditDemo",sources:v.sources,service:["ProductService"],data:["products-small"],github:"datatable/DataTableEditDemo.vue"},null,8,["sources"])])}n("498a"),n("ac1f"),n("5319"),n("a9e3");var h=n("e9c0"),b=n("bcab"),S={data:function(){return{editingRows:[],columns:null,products1:null,products2:null,products3:null,statuses:[{label:"In Stock",value:"INSTOCK"},{label:"Low Stock",value:"LOWSTOCK"},{label:"Out of Stock",value:"OUTOFSTOCK"}],filters:{code:{value:null,matchMode:b["a"].STARTS_WITH},name:{value:null,matchMode:b["a"].STARTS_WITH},quantity:{value:null,matchMode:b["a"].STARTS_WITH},price:{value:null,matchMode:b["a"].STARTS_WITH}},sources:{"options-api":{tabName:"Options API Source",content:'\n<template>\n    <div class="p-fluid">\n        <div class="card">\n            <h5>Cell Editing</h5>\n            <p>Validations, dynamic columns and reverting values with the escape key.</p>\n            <DataTable :value="products1" editMode="cell" @cell-edit-complete="onCellEditComplete" class="editable-cells-table" responsiveLayout="scroll">\n                <Column v-for="col of columns" :field="col.field" :header="col.header" :key="col.field" style="width:25%">\n                    <template #editor="{ data, field }">\n                        <InputText v-model="data[field]" autofocus />\n                    </template>\n                </Column>\n            </DataTable>\n        </div>\n\n        <div class="card">\n            <h5>Row Editing</h5>\n            <DataTable :value="products2" editMode="row" dataKey="id" v-model:editingRows="editingRows" @row-edit-save="onRowEditSave" responsiveLayout="scroll">\n                <Column field="code" header="Code" style="width:20%">\n                    <template #editor="{ data, field }">\n                        <InputText v-model="data[field]" autofocus />\n                    </template>\n                </Column>\n                <Column field="name" header="Name" style="width:20%">\n                    <template #editor="{ data, field }">\n                        <InputText v-model="data[field]" />\n                    </template>\n                </Column>\n                <Column field="inventoryStatus" header="Status" style="width:20%">\n                    <template #editor="{ data, field }">\n                        <Dropdown v-model="data[field]" :options="statuses" optionLabel="label" optionValue="value" placeholder="Select a Status">\n                            <template #option="slotProps">\n                                <span :class="\'product-badge status-\' + slotProps.option.value.toLowerCase()">{{slotProps.option.label}}</span>\n                            </template>\n                        </Dropdown>\n                    </template>\n                    <template #body="slotProps">\n                        {{getStatusLabel(slotProps.data.inventoryStatus)}}\n                    </template>\n                </Column>\n                <Column field="price" header="Price" style="width:20%">\n                    <template #editor="{ data, field }">\n                        <InputText v-model="data[field]" />\n                    </template>\n                </Column>\n                <Column :rowEditor="true" style="width:10%; min-width:8rem" bodyStyle="text-align:center"></Column>\n            </DataTable>\n        </div>\n\n        <div class="card">\n            <h5>Cell Editing with Sorting and Filter</h5>\n            <DataTable :value="products3" editMode="cell" @cell-edit-complete="onCellEditComplete" class="editable-cells-table" filterDisplay="row" v-model:filters="filters" responsiveLayout="scroll">\n                <Column v-for="col of columns" :field="col.field" :header="col.header" :key="col.field" style="width:25%" sortable filter>\n                    <template #filter="{filterModel,filterCallback}">\n                        <InputText type="text" v-model="filterModel.value" @keydown.enter="filterCallback()" class="p-column-filter" v-tooltip.top.focus="\'Hit enter key to filter\'"/>\n                    </template>\n                    <template #editor="{ data, field }">\n                        <InputText v-model="data[field]" autofocus />\n                    </template>\n                </Column>\n            </DataTable>\n        </div>\n    </div>\n</template>\n\n<script>\nimport ProductService from \'./service/ProductService\';\nimport {FilterMatchMode} from \'primevue/api\';\n\nexport default {\n    data() {\n        return {\n            editingRows: [],\n            columns: null,\n            products1: null,\n            products2: null,\n            products3: null,\n            statuses: [\n                {label: \'In Stock\', value: \'INSTOCK\'},\n                {label: \'Low Stock\', value: \'LOWSTOCK\'},\n                {label: \'Out of Stock\', value: \'OUTOFSTOCK\'}\n            ],\n            filters: {\n                \'code\': {value: null, matchMode: FilterMatchMode.STARTS_WITH},\n                \'name\': {value: null, matchMode: FilterMatchMode.STARTS_WITH},\n                \'quantity\': {value: null, matchMode: FilterMatchMode.STARTS_WITH},\n                \'price\': {value: null, matchMode: FilterMatchMode.STARTS_WITH}\n            }\n        }\n    },\n    productService: null,\n    created() {\n        this.productService = new ProductService();\n\n        this.columns = [\n            {field: \'code\', header: \'Code\'},\n            {field: \'name\', header: \'Name\'},\n            {field: \'quantity\', header: \'Quantity\'},\n            {field: \'price\', header: \'Price\'}\n        ];\n    },\n    methods: {\n        onCellEditComplete(event) {\n            let { data, newValue, field } = event;\n\n            switch (field) {\n                case \'quantity\':\n                case \'price\':\n                    if (this.isPositiveInteger(newValue))\n                        data[field] = newValue;\n                    else\n                        event.preventDefault();\n                break;\n\n                default:\n                    if (newValue.trim().length > 0)\n                        data[field] = newValue;\n                    else\n                        event.preventDefault();\n                break;\n            }\n        },\n        isPositiveInteger(val) {\n            let str = String(val);\n            str = str.trim();\n            if (!str) {\n                return false;\n            }\n            str = str.replace(/^0+/, "") || "0";\n            var n = Math.floor(Number(str));\n            return n !== Infinity && String(n) === str && n >= 0;\n        },\n        onRowEditSave(event) {\n            let { newData, index } = event;\n\n            this.products2[index] = newData;\n        },\n        getStatusLabel(status) {\n            switch(status) {\n                case \'INSTOCK\':\n                    return \'In Stock\';\n\n                case \'LOWSTOCK\':\n                    return \'Low Stock\';\n\n                case \'OUTOFSTOCK\':\n                    return \'Out of Stock\';\n\n                default:\n                    return \'NA\';\n            }\n        }\n    },\n    mounted() {\n        this.productService.getProductsSmall().then(data => this.products1 = data);\n        this.productService.getProductsSmall().then(data => this.products2 = data);\n        this.productService.getProductsSmall().then(data => this.products3 = data);\n    }\n}\n<\\/script>\n\n<style lang="scss" scoped>\n::v-deep(.editable-cells-table td.p-cell-editing) {\n    padding-top: 0;\n    padding-bottom: 0;\n}\n</style>'},"composition-api":{tabName:"Composition API Source",content:'\n<template>\n    <div class="p-fluid">\n        <div class="card">\n            <h5>Cell Editing</h5>\n            <p>Validations, dynamic columns and reverting values with the escape key.</p>\n            <DataTable :value="products1" editMode="cell" @cell-edit-complete="onCellEditComplete" class="editable-cells-table" responsiveLayout="scroll">\n                <Column v-for="col of columns" :field="col.field" :header="col.header" :key="col.field" style="width:25%">\n                    <template #editor="{ data, field }">\n                        <InputText v-model="data[field]" autofocus />\n                    </template>\n                </Column>\n            </DataTable>\n        </div>\n\n        <div class="card">\n            <h5>Row Editing</h5>\n            <DataTable :value="products2" editMode="row" dataKey="id" v-model:editingRows="editingRows" @row-edit-save="onRowEditSave" responsiveLayout="scroll">\n                <Column field="code" header="Code" style="width:20%">\n                    <template #editor="{ data, field }">\n                        <InputText v-model="data[field]" autofocus />\n                    </template>\n                </Column>\n                <Column field="name" header="Name" style="width:20%">\n                    <template #editor="{ data, field }">\n                        <InputText v-model="data[field]" />\n                    </template>\n                </Column>\n                <Column field="inventoryStatus" header="Status" style="width:20%">\n                    <template #editor="{ data, field }">\n                        <Dropdown v-model="data[field]" :options="statuses" optionLabel="label" optionValue="value" placeholder="Select a Status">\n                            <template #option="slotProps">\n                                <span :class="\'product-badge status-\' + slotProps.option.value.toLowerCase()">{{slotProps.option.label}}</span>\n                            </template>\n                        </Dropdown>\n                    </template>\n                    <template #body="slotProps">\n                        {{getStatusLabel(slotProps.data.inventoryStatus)}}\n                    </template>\n                </Column>\n                <Column field="price" header="Price" style="width:20%">\n                    <template #editor="{ data, field }">\n                        <InputText v-model="data[field]" />\n                    </template>\n                </Column>\n                <Column :rowEditor="true" style="width:10%; min-width:8rem" bodyStyle="text-align:center"></Column>\n            </DataTable>\n        </div>\n\n        <div class="card">\n            <h5>Cell Editing with Sorting and Filter</h5>\n            <DataTable :value="products3" editMode="cell" @cell-edit-complete="onCellEditComplete" class="editable-cells-table" filterDisplay="row" v-model:filters="filters" responsiveLayout="scroll">\n                <Column v-for="col of columns" :field="col.field" :header="col.header" :key="col.field" style="width:25%" sortable filter>\n                    <template #filter="{filterModel,filterCallback}">\n                        <InputText type="text" v-model="filterModel.value" @keydown.enter="filterCallback()" class="p-column-filter" v-tooltip.top.focus="\'Hit enter key to filter\'"/>\n                    </template>\n                    <template #editor="{ data, field }">\n                        <InputText v-model="data[field]" autofocus />\n                    </template>\n                </Column>\n            </DataTable>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { ref, onMounted } from \'vue\';\nimport ProductService from \'./service/ProductService\';\nimport {FilterMatchMode} from \'primevue/api\';\n\nexport default {\n    setup() {\n        onMounted(() => {\n            productService.value.getProductsSmall().then(data => products1.value = data);\n            productService.value.getProductsSmall().then(data => products2.value = data);\n            productService.value.getProductsSmall().then(data => products3.value = data);\n        });\n\n        const productService = ref(new ProductService());\n        const editingRows = ref([]);\n        const columns = ref([\n            {field: \'code\', header: \'Code\'},\n            {field: \'name\', header: \'Name\'},\n            {field: \'quantity\', header: \'Quantity\'},\n            {field: \'price\', header: \'Price\'}\n        ]);\n        const products1 = ref(null);\n        const products2 = ref(null);\n        const products3 = ref(null);\n        const statuses = ref([\n            {label: \'In Stock\', value: \'INSTOCK\'},\n            {label: \'Low Stock\', value: \'LOWSTOCK\'},\n            {label: \'Out of Stock\', value: \'OUTOFSTOCK\'}\n        ]);\n        const filters = ref({\n            \'code\': {value: null, matchMode: FilterMatchMode.STARTS_WITH},\n            \'name\': {value: null, matchMode: FilterMatchMode.STARTS_WITH},\n            \'quantity\': {value: null, matchMode: FilterMatchMode.STARTS_WITH},\n            \'price\': {value: null, matchMode: FilterMatchMode.STARTS_WITH}\n        });\n\n        const onCellEditComplete = (event) => {\n            let { data, newValue, field } = event;\n\n            switch (field) {\n                case \'quantity\':\n                case \'price\':\n                    if (isPositiveInteger(newValue))\n                        data[field] = newValue;\n                    else\n                        event.preventDefault();\n                break;\n\n                default:\n                    if (newValue.trim().length > 0)\n                        data[field] = newValue;\n                    else\n                        event.preventDefault();\n                break;\n            }\n        };\n        const isPositiveInteger = (val) => {\n            let str = String(val);\n            str = str.trim();\n            if (!str) {\n                return false;\n            }\n            str = str.replace(/^0+/, "") || "0";\n            var n = Math.floor(Number(str));\n            return n !== Infinity && String(n) === str && n >= 0;\n        };\n        const onRowEditSave = (event) => {\n            let { newData, index } = event;\n\n            products2.value[index] = newData;\n        };\n        const getStatusLabel = (status) => {\n            switch(status) {\n                case \'INSTOCK\':\n                    return \'In Stock\';\n\n                case \'LOWSTOCK\':\n                    return \'Low Stock\';\n\n                case \'OUTOFSTOCK\':\n                    return \'Out of Stock\';\n\n                default:\n                    return \'NA\';\n            }\n        };\n\n        return { productService, editingRows, columns, products1, products2, products3, statuses, filters, onCellEditComplete,\n            isPositiveInteger, onRowEditSave, getStatusLabel }\n    }\n}\n<\\/script>\n\n<style lang="scss" scoped>\n::v-deep(.editable-cells-table td.p-cell-editing) {\n    padding-top: 0;\n    padding-bottom: 0;\n}\n</style>'},"browser-source":{tabName:"Browser Source",imports:'<script src="https://unpkg.com/primevue@^3/datatable/datatable.min.js"><\\/script>\n        <script src="https://unpkg.com/primevue@^3/column/column.min.js"><\\/script>\n        <script src="https://unpkg.com/primevue@^3/dropdown/dropdown.min.js"><\\/script>\n        <script src="./ProductService.js"><\\/script>',content:'<div id="app" class="p-fluid card">\n            <div class="card">\n                <h5>Cell Editing</h5>\n                <p>Validations, dynamic columns and reverting values with the escape key.</p>\n                <p-datatable :value="products1" edit-mode="cell" @cell-edit-complete="onCellEditComplete" class="editable-cells-table" responsive-layout="scroll">\n                    <p-column v-for="col of columns" :field="col.field" :header="col.header" :key="col.field" style="width:25%">\n                        <template #editor="{ data, field }">\n                            <p-inputtext v-model="data[field]" autofocus></p-inputtext>\n                        </template>\n                    </p-column>\n                </p-datatable>\n            </div>\n\n            <div class="card">\n                <h5>Row Editing</h5>\n                <p-datatable :value="products2" edit-mode="row" dataKey="id" v-model:editing-rows="editingRows" @row-edit-save="onRowEditSave" responsive-layout="scroll">\n                    <p-column field="code" header="Code" style="width:20%">\n                        <template #editor="{ data, field }">\n                            <p-inputtext v-model="data[field]" autofocus></p-inputtext>\n                        </template>\n                    </p-column>\n                    <p-column field="name" header="Name" style="width:20%">\n                        <template #editor="{ data, field }">\n                            <p-inputtext v-model="data[field]"></p-inputtext>\n                        </template>\n                    </p-column>\n                    <p-column field="inventoryStatus" header="Status" style="width:20%">\n                        <template #editor="{ data, field }">\n                            <p-dropdown v-model="data[field]" :options="statuses" option-label="label" option-value="value" placeholder="Select a Status">\n                                <template #option="slotProps">\n                                    <span :class="\'product-badge status-\' + slotProps.option.value.toLowerCase()">{{slotProps.option.label}}</span>\n                                </template>\n                            </p-dropdown>\n                        </template>\n                        <template #body="slotProps">\n                            {{getStatusLabel(slotProps.data.inventoryStatus)}}\n                        </template>\n                    </p-column>\n                    <p-column field="price" header="Price" style="width:20%">\n                        <template #editor="{ data, field }">\n                            <p-inputtext v-model="data[field]"></p-inputtext>\n                        </template>\n                    </p-column>\n                    <p-column :row-editor="true" style="width:10%; min-width:8rem" bodyStyle="text-align:center"></p-column>\n                </p-datatable>\n            </div>\n\n            <div class="card">\n                <h5>Cell Editing with Sorting and Filter</h5>\n                <p-datatable :value="products3" editMode="cell" @cell-edit-complete="onCellEditComplete" class="editable-cells-table" filterDisplay="row" v-model:filters="filters" responsiveLayout="scroll">\n                    <p-column v-for="col of columns" :field="col.field" :header="col.header" :key="col.field" style="width:25%" sortable filter>\n                        <template #filter="{filterModel,filterCallback}">\n                            <InputText type="text" v-model="filterModel.value" @keydown.enter="filterCallback()" class="p-column-filter" v-tooltip.top.focus="\'Hit enter key to filter\'"/>\n                        </template>\n                        <template #editor="{ data, field }">\n                            <InputText v-model="data[field]" autofocus />\n                        </template>\n                    </Column>\n                </p-datatable>\n            </div>\n        </div>\n\n        <script type="module">\n        const { createApp, ref, onMounted } = Vue;\n        const { FilterMatchMode } = primevue.api;\n\n        const App = {\n            setup() {\n                onMounted(() => {\n                    productService.value.getProductsSmall().then(data => products1.value = data);\n                    productService.value.getProductsSmall().then(data => products2.value = data);\n                    productService.value.getProductsSmall().then(data => products3.value = data);\n                });\n\n                const productService = ref(new ProductService());\n                const editingRows = ref([]);\n                const columns = ref([\n                    {field: \'code\', header: \'Code\'},\n                    {field: \'name\', header: \'Name\'},\n                    {field: \'quantity\', header: \'Quantity\'},\n                    {field: \'price\', header: \'Price\'}\n                ]);\n                const products1 = ref(null);\n                const products2 = ref(null);\n                const products3 = ref(null);\n                const statuses = ref([\n                    {label: \'In Stock\', value: \'INSTOCK\'},\n                    {label: \'Low Stock\', value: \'LOWSTOCK\'},\n                    {label: \'Out of Stock\', value: \'OUTOFSTOCK\'}\n                ]);\n                const filters = ref({\n                    \'code\': {value: null, matchMode: FilterMatchMode.STARTS_WITH},\n                    \'name\': {value: null, matchMode: FilterMatchMode.STARTS_WITH},\n                    \'quantity\': {value: null, matchMode: FilterMatchMode.STARTS_WITH},\n                    \'price\': {value: null, matchMode: FilterMatchMode.STARTS_WITH}\n                });\n\n                const onCellEditComplete = (event) => {\n                    let { data, newValue, field } = event;\n\n                    switch (field) {\n                        case \'quantity\':\n                        case \'price\':\n                            if (isPositiveInteger(newValue))\n                                data[field] = newValue;\n                            else\n                                event.preventDefault();\n                        break;\n\n                        default:\n                            if (newValue.trim().length > 0)\n                                data[field] = newValue;\n                            else\n                                event.preventDefault();\n                        break;\n                    }\n                };\n                const isPositiveInteger = (val) => {\n                    let str = String(val);\n                    str = str.trim();\n                    if (!str) {\n                        return false;\n                    }\n                    str = str.replace(/^0+/, "") || "0";\n                    var n = Math.floor(Number(str));\n                    return n !== Infinity && String(n) === str && n >= 0;\n                };\n                const onRowEditSave = (event) => {\n                    let { newData, index } = event;\n\n                    products2.value[index] = newData;\n                };\n                const getStatusLabel = (status) => {\n                    switch(status) {\n                        case \'INSTOCK\':\n                            return \'In Stock\';\n\n                        case \'LOWSTOCK\':\n                            return \'Low Stock\';\n\n                        case \'OUTOFSTOCK\':\n                            return \'Out of Stock\';\n\n                        default:\n                            return \'NA\';\n                    }\n                };\n\n                return { productService, editingRows, columns, products1, products2, products3, statuses, filters, onCellEditComplete,\n                    isPositiveInteger, onRowEditSave, getStatusLabel }\n            },\n            components: {\n                "p-datatable": primevue.datatable,\n                "p-column": primevue.column,\n                "p-dropdown": primevue.dropdown,\n                "p-inputtext": primevue.inputtext\n            }\n        };\n\n        createApp(App)\n            .use(primevue.config.default)\n            .mount("#app");\n        <\\/script>\n\n<style>\n.editable-cells-table td.p-cell-editing {\n    padding-top: 0;\n    padding-bottom: 0;\n}\n</style>'}}}},productService:null,created:function(){this.productService=new h["a"],this.columns=[{field:"code",header:"Code"},{field:"name",header:"Name"},{field:"quantity",header:"Quantity"},{field:"price",header:"Price"}]},methods:{onCellEditComplete:function(e){var t=e.data,n=e.newValue,l=e.field;switch(l){case"quantity":case"price":this.isPositiveInteger(n)?t[l]=n:e.preventDefault();break;default:n.trim().length>0?t[l]=n:e.preventDefault();break}},isPositiveInteger:function(e){var t=String(e);if(t=t.trim(),!t)return!1;t=t.replace(/^0+/,"")||"0";var n=Math.floor(Number(t));return n!==1/0&&String(n)===t&&n>=0},onRowEditSave:function(e){var t=e.newData,n=e.index;this.products2[n]=t},getStatusLabel:function(e){switch(e){case"INSTOCK":return"In Stock";case"LOWSTOCK":return"Low Stock";case"OUTOFSTOCK":return"Out of Stock";default:return"NA"}}},mounted:function(){var e=this;this.productService.getProductsSmall().then((function(t){return e.products1=t})),this.productService.getProductsSmall().then((function(t){return e.products2=t})),this.productService.getProductsSmall().then((function(t){return e.products3=t}))}},w=(n("1d97"),n("6b0d")),O=n.n(w);const y=O()(S,[["render",v],["__scopeId","data-v-33586427"]]);t["default"]=y},"69b9":function(e,t,n){var l=n("24fb");t=l(!1),t.push([e.i,"[data-v-33586427] .editable-cells-table td.p-cell-editing{padding-top:0;padding-bottom:0}",""]),e.exports=t},e9c0:function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var l=n("d4ec"),a=n("bee2"),o=(n("d3b7"),function(){function e(){Object(l["a"])(this,e)}return Object(a["a"])(e,[{key:"getProductsSmall",value:function(){return fetch("demo/data/products-small.json").then((function(e){return e.json()})).then((function(e){return e.data}))}},{key:"getProducts",value:function(){return fetch("demo/data/products.json").then((function(e){return e.json()})).then((function(e){return e.data}))}},{key:"getProductsWithOrdersSmall",value:function(){return fetch("demo/data/products-orders-small.json").then((function(e){return e.json()})).then((function(e){return e.data}))}}]),e}())}}]);