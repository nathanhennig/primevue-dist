(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d225064"],{e344:function(e,n,l){"use strict";l.r(n);var t=l("7a23"),o={class:"content-section introduction"},c=Object(t["k"])("div",{class:"feature-intro"},[Object(t["k"])("h1",null,[Object(t["n"])("TreeTable "),Object(t["k"])("span",null,"Column Toggle")]),Object(t["k"])("p",null,"MultiSelect component can be used to implement column toggle functionality.")],-1),s={class:"content-section implementation"},d={class:"card"},u={style:{"text-align":"left"}};function i(e,n,l,i,r,a){var m=Object(t["P"])("AppDemoActions"),p=Object(t["P"])("MultiSelect"),v=Object(t["P"])("Column"),f=Object(t["P"])("TreeTable"),h=Object(t["P"])("AppDoc");return Object(t["H"])(),Object(t["j"])("div",null,[Object(t["k"])("div",o,[c,Object(t["o"])(m)]),Object(t["k"])("div",s,[Object(t["k"])("div",d,[Object(t["o"])(f,{value:r.nodes},{header:Object(t["Z"])((function(){return[Object(t["k"])("div",u,[Object(t["o"])(p,{modelValue:r.selectedColumns,"onUpdate:modelValue":a.onToggle,options:r.columns,optionLabel:"header",placeholder:"Select Columns",style:{width:"20em"}},null,8,["modelValue","onUpdate:modelValue","options"])])]})),default:Object(t["Z"])((function(){return[Object(t["o"])(v,{field:"name",header:"Name",expander:!0}),(Object(t["H"])(!0),Object(t["j"])(t["a"],null,Object(t["N"])(r.selectedColumns,(function(e){return Object(t["H"])(),Object(t["h"])(v,{field:e.field,header:e.header,key:e.field},null,8,["field","header"])})),128))]})),_:1},8,["value"])])]),Object(t["o"])(h,{name:"TreeTableColToggleDemo",sources:r.sources,service:["NodeService"],data:["treetablenodes"],github:"treetable/TreeTableColToggleDemo.vue"},null,8,["sources"])])}l("4de4"),l("d3b7"),l("caad"),l("2532");var r=l("82f4"),a={data:function(){return{selectedColumns:null,columns:null,nodes:null,sources:{"options-api":{tabName:"Options API Source",content:'\n<template>\n    <div>\n        <TreeTable :value="nodes">\n            <template #header>\n                <div style="text-align:left">\n                    <MultiSelect :modelValue="selectedColumns" @update:modelValue="onToggle" :options="columns" optionLabel="header" placeholder="Select Columns" style="width: 20em"/>\n                </div>\n            </template>\n            <Column field="name" header="Name" :expander="true"></Column>\n            <Column v-for="col of selectedColumns" :field="col.field" :header="col.header" :key="col.field"></Column>\n        </TreeTable>\n    </div>                    \n</template>\n\n<script>\nimport NodeService from \'./service/NodeService\';\n\nexport default {\n    data() {\n        return {\n            selectedColumns: null,\n            columns: null,\n            nodes: null,\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n\n        this.columns = [\n            {field: \'size\', header: \'Size\'},\n            {field: \'type\', header: \'Type\'}\n        ];\n\n        this.selectedColumns = this.columns;\n    },\n    mounted() {\n        this.nodeService.getTreeTableNodes().then(data => this.nodes = data);\n    },\n    methods: {\n        onToggle(value) {\n            this.selectedColumns = this.columns.filter(col => value.includes(col));\n        }\n    }\n}\n<\\/script>\n'},"composition-api":{tabName:"Composition API Source",content:'\n<template>\n    <div>\n        <TreeTable :value="nodes">\n            <template #header>\n                <div style="text-align:left">\n                    <MultiSelect :modelValue="selectedColumns" @update:modelValue="onToggle" :options="columns" optionLabel="header" placeholder="Select Columns" style="width: 20em"/>\n                </div>\n            </template>\n            <Column field="name" header="Name" :expander="true"></Column>\n            <Column v-for="col of selectedColumns" :field="col.field" :header="col.header" :key="col.field"></Column>\n        </TreeTable>\n    </div>                    \n</template>\n\n<script>\nimport { ref, onMounted } from \'vue\';\nimport NodeService from \'./service/NodeService\';\n\nexport default {\n    setup() {\n        onMounted(() => {\n            nodeService.value.getTreeTableNodes().then(data => nodes.value = data);\n        })\n        const columns = ref([\n            {field: \'size\', header: \'Size\'},\n            {field: \'type\', header: \'Type\'}\n        ]);\n        const nodes = ref();\n        const nodeService = ref(new NodeService());\n        const selectedColumns = ref(columns.value);\n        const onToggle = (val) => {\n            selectedColumns.value = columns.value.filter(col => val.includes(col));\n        }\n\n        return { columns, nodes, nodeService, selectedColumns, onToggle }\n    }\n}\n<\\/script>\n'},"browser-source":{tabName:"Browser Source",imports:'<script src="https://unpkg.com/primevue@^3/treetable/treetable.min.js"><\\/script>\n        <script src="https://unpkg.com/primevue@^3/column/column.min.js"><\\/script>\n        <script src="https://unpkg.com/primevue@^3/multiselect/multiselect.min.js"><\\/script>\n        <script src="./NodeService.js"><\\/script>',content:'<div id="app">\n            <p-treetable :value="nodes">\n                <template #header>\n                    <div style="text-align:left">\n                        <p-multiselect :model-value="selectedColumns" @update:model-value="onToggle" :options="columns" option-label="header" placeholder="Select Columns" style="width: 20em"></p-multiselect>\n                    </div>\n                </template>\n                <p-column field="name" header="Name" :expander="true"></p-column>\n                <p-column v-for="col of selectedColumns" :field="col.field" :header="col.header" :key="col.field"></p-olumn>\n            </p-treetable>\n        </div>                    \n\n        <script type="module">\n        const { createApp, ref, onMounted } = Vue;\n\n        const App = {\n            setup() {\n                onMounted(() => {\n                    nodeService.value.getTreeTableNodes().then(data => nodes.value = data);\n                })\n                const columns = ref([\n                    {field: \'size\', header: \'Size\'},\n                    {field: \'type\', header: \'Type\'}\n                ]);\n                const nodes = ref();\n                const nodeService = ref(new NodeService());\n                const selectedColumns = ref(columns.value);\n                const onToggle = (val) => {\n                    selectedColumns.value = columns.value.filter(col => val.includes(col));\n                }\n\n                return { columns, nodes, nodeService, selectedColumns, onToggle }\n            },\n            components: {\n                "p-treetable": primevue.treetable,\n                "p-column": primevue.column,\n                "p-multiselect": primevue.multiselect\n            }\n        };\n\n        createApp(App)\n            .use(primevue.config.default)\n            .mount("#app");\n        <\\/script>\n'}}}},nodeService:null,created:function(){this.nodeService=new r["a"],this.columns=[{field:"size",header:"Size"},{field:"type",header:"Type"}],this.selectedColumns=this.columns},mounted:function(){var e=this;this.nodeService.getTreeTableNodes().then((function(n){return e.nodes=n}))},methods:{onToggle:function(e){this.selectedColumns=this.columns.filter((function(n){return e.includes(n)}))}}},m=l("6b0d"),p=l.n(m);const v=p()(a,[["render",i]]);n["default"]=v}}]);