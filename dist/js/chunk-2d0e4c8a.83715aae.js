(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0e4c8a"],{9261:function(e,t,n){"use strict";n.r(t);var l=n("7a23"),a={class:"content-section introduction"},o=Object(l["k"])("div",{class:"feature-intro"},[Object(l["k"])("h1",null,[Object(l["n"])("DataTable "),Object(l["k"])("span",null,"Lazy")]),Object(l["k"])("p",null,[Object(l["n"])("Lazy mode is handy to deal with large datasets, instead of loading the entire data, small chunks of data is loaded by invoking corresponding callbacks everytime paging, sorting and filtering happens. Sample belows imitates lazy paging by using an in memory list. It is also important to assign the logical number of rows to totalRecords by doing a projection query for paginator configuration so that paginator displays the UI assuming there are actually records of totalRecords size although in reality they aren't as in lazy mode, only the records that are displayed on the current page exist. In addition, the implementation of "),Object(l["k"])("b",null,"checkbox selection"),Object(l["n"])(" in lazy tables is left entirely to the user since the DataTable does not have access to the whole dataset in order to define the checked state. ")])],-1),r={class:"content-section implementation"},s={class:"card"};function c(e,t,n,c,i,u){var d=Object(l["P"])("AppDemoActions"),m=Object(l["P"])("Column"),f=Object(l["P"])("InputText"),p=Object(l["P"])("DataTable"),v=Object(l["P"])("AppDoc");return Object(l["H"])(),Object(l["j"])("div",null,[Object(l["k"])("div",a,[o,Object(l["o"])(d)]),Object(l["k"])("div",r,[Object(l["k"])("div",s,[Object(l["o"])(p,{value:i.customers,lazy:!0,paginator:!0,rows:10,filters:i.filters,"onUpdate:filters":t[0]||(t[0]=function(e){return i.filters=e}),ref:"dt",dataKey:"id",totalRecords:i.totalRecords,loading:i.loading,onPage:t[1]||(t[1]=function(e){return u.onPage(e)}),onSort:t[2]||(t[2]=function(e){return u.onSort(e)}),onFilter:t[3]||(t[3]=function(e){return u.onFilter(e)}),filterDisplay:"row",globalFilterFields:["name","country.name","company","representative.name"],responsiveLayout:"scroll",selection:i.selectedCustomers,"onUpdate:selection":t[4]||(t[4]=function(e){return i.selectedCustomers=e}),selectAll:i.selectAll,onSelectAllChange:u.onSelectAllChange,onRowSelect:u.onRowSelect,onRowUnselect:u.onRowUnselect},{default:Object(l["Z"])((function(){return[Object(l["o"])(m,{selectionMode:"multiple",headerStyle:"width: 3em"}),Object(l["o"])(m,{field:"name",header:"Name",filterMatchMode:"startsWith",ref:"name",sortable:!0},{filter:Object(l["Z"])((function(e){var t=e.filterModel,n=e.filterCallback;return[Object(l["o"])(f,{type:"text",modelValue:t.value,"onUpdate:modelValue":function(e){return t.value=e},onKeydown:Object(l["bb"])((function(e){return n()}),["enter"]),class:"p-column-filter",placeholder:"Search by name"},null,8,["modelValue","onUpdate:modelValue","onKeydown"])]})),_:1},512),Object(l["o"])(m,{field:"country.name",header:"Country",filterField:"country.name",filterMatchMode:"contains",ref:"country.name",sortable:!0},{filter:Object(l["Z"])((function(e){var t=e.filterModel,n=e.filterCallback;return[Object(l["o"])(f,{type:"text",modelValue:t.value,"onUpdate:modelValue":function(e){return t.value=e},onKeydown:Object(l["bb"])((function(e){return n()}),["enter"]),class:"p-column-filter",placeholder:"Search by country"},null,8,["modelValue","onUpdate:modelValue","onKeydown"])]})),_:1},512),Object(l["o"])(m,{field:"company",header:"Company",filterMatchMode:"contains",ref:"company",sortable:!0},{filter:Object(l["Z"])((function(e){var t=e.filterModel,n=e.filterCallback;return[Object(l["o"])(f,{type:"text",modelValue:t.value,"onUpdate:modelValue":function(e){return t.value=e},onKeydown:Object(l["bb"])((function(e){return n()}),["enter"]),class:"p-column-filter",placeholder:"Search by company"},null,8,["modelValue","onUpdate:modelValue","onKeydown"])]})),_:1},512),Object(l["o"])(m,{field:"representative.name",header:"Representative",filterField:"representative.name",ref:"representative.name",sortable:!0},{filter:Object(l["Z"])((function(e){var t=e.filterModel,n=e.filterCallback;return[Object(l["o"])(f,{type:"text",modelValue:t.value,"onUpdate:modelValue":function(e){return t.value=e},onKeydown:Object(l["bb"])((function(e){return n()}),["enter"]),class:"p-column-filter",placeholder:"Search by representative"},null,8,["modelValue","onUpdate:modelValue","onKeydown"])]})),_:1},512)]})),_:1},8,["value","filters","totalRecords","loading","globalFilterFields","selection","selectAll","onSelectAllChange","onRowSelect","onRowUnselect"])])]),Object(l["o"])(v,{name:"DataTableLazyDemo",sources:i.sources,service:["CustomerService"],github:"datatable/DataTableLazyDemo.vue"},null,8,["sources"])])}n("e9c4");var i=n("9fa9"),u={data:function(){return{loading:!1,totalRecords:0,customers:null,selectedCustomers:null,selectAll:!1,filters:{name:{value:"",matchMode:"contains"},"country.name":{value:"",matchMode:"contains"},company:{value:"",matchMode:"contains"},"representative.name":{value:"",matchMode:"contains"}},lazyParams:{},columns:[{field:"name",header:"Name"},{field:"country.name",header:"Country"},{field:"company",header:"Company"},{field:"representative.name",header:"Representative"}],sources:{"options-api":{tabName:"Options API Source",content:'\n<template>\n\t<div>\n        <DataTable :value="customers" :lazy="true" :paginator="true" :rows="10" v-model:filters="filters" ref="dt" dataKey="id"\n            :totalRecords="totalRecords" :loading="loading" @page="onPage($event)" @sort="onSort($event)" @filter="onFilter($event)" filterDisplay="row"\n            :globalFilterFields="[\'name\',\'country.name\', \'company\', \'representative.name\']" responsiveLayout="scroll"\n            v-model:selection="selectedCustomers" :selectAll="selectAll" @select-all-change="onSelectAllChange" @row-select="onRowSelect" @row-unselect="onRowUnselect">\n            <Column selectionMode="multiple" headerStyle="width: 3em"></Column>\n            <Column field="name" header="Name" filterMatchMode="startsWith" ref="name" :sortable="true">\n                <template #filter="{filterModel,filterCallback}">\n                    <InputText type="text" v-model="filterModel.value" @keydown.enter="filterCallback()" class="p-column-filter" placeholder="Search by name"/>\n                </template>\n            </Column>\n            <Column field="country.name" header="Country" filterField="country.name" filterMatchMode="contains" ref="country.name" :sortable="true">\n                <template #filter="{filterModel,filterCallback}">\n                    <InputText type="text" v-model="filterModel.value" @keydown.enter="filterCallback()" class="p-column-filter" placeholder="Search by country"/>\n                </template>\n            </Column>\n            <Column field="company" header="Company" filterMatchMode="contains" ref="company" :sortable="true">\n                <template #filter="{filterModel,filterCallback}">\n                    <InputText type="text" v-model="filterModel.value" @keydown.enter="filterCallback()" class="p-column-filter" placeholder="Search by company"/>\n                </template>\n            </Column>\n            <Column field="representative.name" header="Representative" filterField="representative.name" ref="representative.name" :sortable="true">\n                <template #filter="{filterModel,filterCallback}">\n                    <InputText type="text" v-model="filterModel.value" @keydown.enter="filterCallback()" class="p-column-filter" placeholder="Search by representative"/>\n                </template>\n            </Column>\n        </DataTable>\n\t</div>\n</template>\n\n<script>\nimport CustomerService from \'./service/CustomerService\';\n\nexport default {\n    data() {\n        return {\n            loading: false,\n            totalRecords: 0,\n            customers: null,\n            selectedCustomers: null,\n            selectAll: false,\n            filters: {\n                \'name\': {value: \'\', matchMode: \'contains\'},\n                \'country.name\': {value: \'\', matchMode: \'contains\'},\n                \'company\': {value: \'\', matchMode: \'contains\'},\n                \'representative.name\': {value: \'\', matchMode: \'contains\'},\n            },\n            lazyParams: {},\n            columns: [\n                {field: \'name\', header: \'Name\'},\n                {field: \'country.name\', header: \'Country\'},\n                {field: \'company\', header: \'Company\'},\n                {field: \'representative.name\', header: \'Representative\'}\n            ]\n        }\n    },\n    customerService: null,\n    created() {\n        this.customerService = new CustomerService();\n    },\n    mounted() {\n        this.loading = true;\n\n        this.lazyParams = {\n            first: 0,\n            rows: this.$refs.dt.rows,\n            sortField: null,\n            sortOrder: null,\n            filters: this.filters\n        };\n\n        this.loadLazyData();\n    },\n    methods: {\n        loadLazyData() {\n            this.loading = true;\n\n            setTimeout(() => {\n                this.customerService.getCustomers(\n                    {lazyEvent: JSON.stringify( this.lazyParams )})\n                        .then(data => {\n                            this.customers = data.customers;\n                            this.totalRecords = data.totalRecords;\n                            this.loading = false;\n                    }\n                );\n            }, Math.random() * 1000 + 250);\n        },\n        onPage(event) {\n            this.lazyParams = event;\n            this.loadLazyData();\n        },\n        onSort(event) {\n            this.lazyParams = event;\n            this.loadLazyData();\n        },\n        onFilter() {\n            this.lazyParams.filters = this.filters;\n            this.loadLazyData();\n        },\n        onSelectAllChange(event) {\n            const selectAll = event.checked;\n\n            if (selectAll) {\n                this.customerService.getCustomers().then(data => {\n                    this.selectAll = true;\n                    this.selectedCustomers = data.customers;\n                });\n            }\n            else {\n                this.selectAll = false;\n                this.selectedCustomers = [];\n            }\n        },\n        onRowSelect() {\n            this.selectAll = this.selectedCustomers.length === this.totalRecords\n        },\n        onRowUnselect() {\n            this.selectAll = false;\n        }\n    }\n}\n<\\/script>\n'},"composition-api":{tabName:"Composition API Source",content:'\n<template>\n\t<div>\n        <DataTable :value="customers" :lazy="true" :paginator="true" :rows="10" v-model:filters="filters" ref="dt" dataKey="id"\n            :totalRecords="totalRecords" :loading="loading" @page="onPage($event)" @sort="onSort($event)" @filter="onFilter($event)" filterDisplay="row"\n            :globalFilterFields="[\'name\',\'country.name\', \'company\', \'representative.name\']" responsiveLayout="scroll"\n            v-model:selection="selectedCustomers" :selectAll="selectAll" @select-all-change="onSelectAllChange" @row-select="onRowSelect" @row-unselect="onRowUnselect">\n            <Column selectionMode="multiple" headerStyle="width: 3em"></Column>\n            <Column field="name" header="Name" filterMatchMode="startsWith" ref="name" :sortable="true">\n                <template #filter="{filterModel,filterCallback}">\n                    <InputText type="text" v-model="filterModel.value" @keydown.enter="filterCallback()" class="p-column-filter" placeholder="Search by name"/>\n                </template>\n            </Column>\n            <Column field="country.name" header="Country" filterField="country.name" filterMatchMode="contains" ref="country.name" :sortable="true">\n                <template #filter="{filterModel,filterCallback}">\n                    <InputText type="text" v-model="filterModel.value" @keydown.enter="filterCallback()" class="p-column-filter" placeholder="Search by country"/>\n                </template>\n            </Column>\n            <Column field="company" header="Company" filterMatchMode="contains" ref="company" :sortable="true">\n                <template #filter="{filterModel,filterCallback}">\n                    <InputText type="text" v-model="filterModel.value" @keydown.enter="filterCallback()" class="p-column-filter" placeholder="Search by company"/>\n                </template>\n            </Column>\n            <Column field="representative.name" header="Representative" filterField="representative.name" ref="representative.name" :sortable="true">\n                <template #filter="{filterModel,filterCallback}">\n                    <InputText type="text" v-model="filterModel.value" @keydown.enter="filterCallback()" class="p-column-filter" placeholder="Search by representative"/>\n                </template>\n            </Column>\n        </DataTable>\n\t</div>\n</template>\n\n<script>\nimport { ref, onMounted } from \'vue\';\nimport CustomerService from \'./service/CustomerService\';\n\nexport default {\n    setup() {\n        onMounted(() => {\n            loading.value = true;\n\n            lazyParams.value = {\n                first: 0,\n                rows: dt.value.rows,\n                sortField: null,\n                sortOrder: null,\n                filters: filters.value\n            };\n\n            loadLazyData();\n        })\n\n        const dt = ref();\n        const loading = ref(false);\n        const totalRecords = ref(0);\n        const customers = ref();\n        const selectedCustomers = ref();\n        const selectAll = ref(false);\n        const customerService = ref(new CustomerService());\n        const filters = ref({\n            \'name\': {value: \'\', matchMode: \'contains\'},\n            \'country.name\': {value: \'\', matchMode: \'contains\'},\n            \'company\': {value: \'\', matchMode: \'contains\'},\n            \'representative.name\': {value: \'\', matchMode: \'contains\'},\n        });\n        const lazyParams = ref({});\n        const columns = ref([\n            {field: \'name\', header: \'Name\'},\n            {field: \'country.name\', header: \'Country\'},\n            {field: \'company\', header: \'Company\'},\n            {field: \'representative.name\', header: \'Representative\'}\n        ]);\n\n        const loadLazyData = () => {\n            loading.value = true;\n\n            setTimeout(() => {\n                customerService.value.getCustomers(\n                    {lazyEvent: JSON.stringify( lazyParams.value )})\n                        .then(data => {\n                            customers.value = data.customers;\n                            totalRecords.value  = data.totalRecords;\n                            loading.value = false;\n                    }\n                );\n            }, Math.random() * 1000 + 250);\n        };\n        const onPage = (event) => {\n            lazyParams.value = event;\n            loadLazyData();\n        };\n        const onSort = (event) => {\n            lazyParams.value = event;\n            loadLazyData();\n        };\n        const onFilter = () => {\n            lazyParams.value.filters = filters.value ;\n            loadLazyData();\n        }\n        const onSelectAllChange = (event) => {\n            const selectAll = event.checked;\n\n            if (selectAll) {\n                customerService.value.getCustomers().then(data => {\n                    selectAll.value = true;\n                    selectedCustomers.value = data.customers;\n                });\n            }\n            else {\n                selectAll.value = false;\n                selectedCustomers.value = [];\n            }\n        }\n        const onRowSelect = () => {\n            selectAll.value = selectedCustomers.value.length === totalRecords.value;\n        }\n        const onRowUnselect = () => {\n            selectAll.value = false;\n        }\n\n        return { dt, loading, totalRecords, customers, filters, lazyParams, columns, loadLazyData, onPage, onSort, onFilter, onSelectAllChange, onRowSelect, onRowUnselect }\n    }\n}\n<\\/script>\n'},"browser-source":{tabName:"Browser Source",imports:'<script src="https://unpkg.com/primevue@^3/datatable/datatable.min.js"><\\/script>\n        <script src="https://unpkg.com/primevue@^3/column/column.min.js"><\\/script>\n        <script src="./CustomerService.js"><\\/script>',content:'<div id="app">\n            <p-datatable :value="customers" :lazy="true" :paginator="true" :rows="10" v-model:filters="filters" ref="dt" dataKey="id"\n                :totalRecords="totalRecords" :loading="loading" @page="onPage($event)" @sort="onSort($event)" @filter="onFilter($event)" filterDisplay="row"\n                :globalFilterFields="[\'name\',\'country.name\', \'company\', \'representative.name\']" responsiveLayout="scroll"\n                v-model:selection="selectedCustomers" :selectAll="selectAll" @select-all-change="onSelectAllChange" @row-select="onRowSelect" @row-unselect="onRowUnselect">\n                <p-column selectionMode="multiple" headerStyle="width: 3em"></Column>\n                <p-column field="name" header="Name" filter-match-mode="startsWith" ref="name" :sortable="true">\n                    <template #filter="{filterModel,filterCallback}">\n                        <p-inputtext type="text" v-model="filterModel.value" @keydown.enter="filterCallback()" class="p-column-filter" placeholder="Search by name"></p-inputtext>\n                    </template>\n                </p-column>\n                <p-column field="country.name" header="Country" filter-field="country.name" filter-match-mode="contains" ref="country.name" :sortable="true">\n                    <template #filter="{filterModel,filterCallback}">\n                        <p-inputtext type="text" v-model="filterModel.value" @keydown.enter="filterCallback()" class="p-column-filter" placeholder="Search by country"></p-inputtext>\n                    </template>\n                </p-column>\n                <p-column field="company" header="Company" filter-match-mode="contains" ref="company" :sortable="true">\n                    <template #filter="{filterModel,filterCallback}">\n                        <p-inputtext type="text" v-model="filterModel.value" @keydown.enter="filterCallback()" class="p-column-filter" placeholder="Search by company"></p-inputtext>\n                    </template>\n                </p-column>\n                <p-column field="representative.name" header="Representative" filter-field="representative.name" ref="representative.name" :sortable="true">\n                    <template #filter="{filterModel,filterCallback}">\n                        <p-inputtext type="text" v-model="filterModel.value" @keydown.enter="filterCallback()" class="p-column-filter" placeholder="Search by representative"></p-inputtext>\n                    </template>\n                </p-column>\n            </p-datatable>\n        </div>\n\n        <script type="module">\n        const { createApp, ref, onMounted } = Vue;\n\n        const App = {\n            setup() {\n                onMounted(() => {\n                    loading.value = true;\n\n                    lazyParams.value = {\n                        first: 0,\n                        rows: dt.value.rows,\n                        sortField: null,\n                        sortOrder: null,\n                        filters: filters.value\n                    };\n\n                    loadLazyData();\n                })\n\n                const dt = ref();\n                const loading = ref(false);\n                const totalRecords = ref(0);\n                const customers = ref();\n                const selectedCustomers = ref();\n                const selectAll = ref(false);\n                const customerService = ref(new CustomerService());\n                const filters = ref({\n                    \'name\': {value: \'\', matchMode: \'contains\'},\n                    \'country.name\': {value: \'\', matchMode: \'contains\'},\n                    \'company\': {value: \'\', matchMode: \'contains\'},\n                    \'representative.name\': {value: \'\', matchMode: \'contains\'},\n                });\n                const lazyParams = ref({});\n                const columns = ref([\n                    {field: \'name\', header: \'Name\'},\n                    {field: \'country.name\', header: \'Country\'},\n                    {field: \'company\', header: \'Company\'},\n                    {field: \'representative.name\', header: \'Representative\'}\n                ]);\n\n                const loadLazyData = () => {\n                    loading.value = true;\n\n                    setTimeout(() => {\n                        customerService.value.getCustomers(\n                            {lazyEvent: JSON.stringify( lazyParams.value )})\n                                .then(data => {\n                                    customers.value = data.customers;\n                                    totalRecords.value  = data.totalRecords;\n                                    loading.value = false;\n                            }\n                        );\n                    }, Math.random() * 1000 + 250);\n                };\n                const onPage = (event) => {\n                    lazyParams.value = event;\n                    loadLazyData();\n                };\n                const onSort = (event) => {\n                    lazyParams.value = event;\n                    loadLazyData();\n                };\n                const onFilter = () => {\n                    lazyParams.value.filters = filters.value ;\n                    loadLazyData();\n                }\n\n                const onSelectAllChange = (event) => {\n                    const selectAll = event.checked;\n\n                    if (selectAll) {\n                        customerService.value.getCustomers().then(data => {\n                            selectAll.value = true;\n                            selectedCustomers.value = data.customers;\n                        });\n                    }\n                    else {\n                        selectAll.value = false;\n                        selectedCustomers.value = [];\n                    }\n                }\n                const onRowSelect = () => {\n                    selectAll.value = selectedCustomers.value.length === totalRecords.value;\n                }\n                const onRowUnselect = () => {\n                    selectAll.value = false;\n                }\n\n                return { dt, loading, totalRecords, customers, filters, lazyParams, columns, loadLazyData, onPage, onSort, onFilter, onSelectAllChange, onRowSelect, onRowUnselect }\n            },\n            components: {\n                "p-datatable": primevue.datatable,\n                "p-column": primevue.column,\n                "p-inputtext": primevue.inputtext\n            }\n        };\n\n        createApp(App)\n            .use(primevue.config.default)\n            .mount("#app");\n        <\\/script>\n'}}}},customerService:null,created:function(){this.customerService=new i["a"]},mounted:function(){this.loading=!0,this.lazyParams={first:0,rows:this.$refs.dt.rows,sortField:null,sortOrder:null,filters:this.filters},this.loadLazyData()},methods:{loadLazyData:function(){var e=this;this.loading=!0,setTimeout((function(){e.customerService.getCustomers({lazyEvent:JSON.stringify(e.lazyParams)}).then((function(t){e.customers=t.customers,e.totalRecords=t.totalRecords,e.loading=!1}))}),1e3*Math.random()+250)},onPage:function(e){this.lazyParams=e,this.loadLazyData()},onSort:function(e){this.lazyParams=e,this.loadLazyData()},onFilter:function(){this.lazyParams.filters=this.filters,this.loadLazyData()},onSelectAllChange:function(e){var t=this,n=e.checked;n?this.customerService.getCustomers().then((function(e){t.selectAll=!0,t.selectedCustomers=e.customers})):(this.selectAll=!1,this.selectedCustomers=[])},onRowSelect:function(){this.selectAll=this.selectedCustomers.length===this.totalRecords},onRowUnselect:function(){this.selectAll=!1}}},d=n("6b0d"),m=n.n(d);const f=m()(u,[["render",c]]);t["default"]=f}}]);