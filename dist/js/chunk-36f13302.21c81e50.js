(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-36f13302"],{9066:function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var l=n("d4ec"),o=n("bee2"),r=(n("d3b7"),function(){function e(){Object(l["a"])(this,e)}return Object(o["a"])(e,[{key:"getCountries",value:function(){return fetch("demo/data/countries.json").then((function(e){return e.json()})).then((function(e){return e.data}))}}]),e}())},"97be":function(e,t,n){"use strict";n.r(t);n("b0c0");var l=n("7a23"),o=n("2d77"),r=n.n(o),i={class:"content-section introduction"},c=Object(l["k"])("div",{class:"feature-intro"},[Object(l["k"])("h1",null,"AutoComplete"),Object(l["k"])("p",null,"AutoComplete is an input component that provides real-time suggestions when being typed.")],-1),u={class:"content-section implementation"},s={class:"card"},a=Object(l["k"])("h5",null,"Basic",-1),d=Object(l["k"])("h5",null,"Grouped",-1),b={class:"flex align-items-center country-item"},p=Object(l["k"])("h5",null,"Dropdown, Templating and Force Selection",-1),m={class:"country-item"},O=Object(l["k"])("h5",null,"Virtual Scroll (1000 Items)",-1),j=Object(l["k"])("h5",null,"Multiple",-1),h={class:"p-fluid"};function k(e,t,n,o,k,f){var v=Object(l["P"])("AppDemoActions"),g=Object(l["P"])("AutoComplete"),y=Object(l["P"])("AutoCompleteDoc");return Object(l["H"])(),Object(l["j"])("div",null,[Object(l["k"])("div",i,[c,Object(l["o"])(v)]),Object(l["k"])("div",u,[Object(l["k"])("div",s,[a,Object(l["o"])(g,{modelValue:k.selectedCountry1,"onUpdate:modelValue":t[0]||(t[0]=function(e){return k.selectedCountry1=e}),suggestions:k.filteredCountries,onComplete:t[1]||(t[1]=function(e){return f.searchCountry(e)}),field:"name"},null,8,["modelValue","suggestions"]),d,Object(l["o"])(g,{modelValue:k.selectedCity,"onUpdate:modelValue":t[2]||(t[2]=function(e){return k.selectedCity=e}),suggestions:k.filteredCities,onComplete:t[3]||(t[3]=function(e){return f.searchCity(e)}),field:"label",optionGroupLabel:"label",optionGroupChildren:"items"},{optiongroup:Object(l["Z"])((function(e){return[Object(l["k"])("div",b,[Object(l["k"])("img",{src:r.a,class:Object(l["A"])("flag flag-"+e.item.code.toLowerCase()),width:"18"},null,2),Object(l["k"])("div",null,Object(l["T"])(e.item.label),1)])]})),_:1},8,["modelValue","suggestions"]),p,Object(l["o"])(g,{modelValue:k.selectedCountry2,"onUpdate:modelValue":t[4]||(t[4]=function(e){return k.selectedCountry2=e}),loadingIcon:"pi pi-discord",suggestions:k.filteredCountries,onComplete:t[5]||(t[5]=function(e){return f.searchCountry(e)}),dropdown:!0,field:"name",forceSelection:""},{item:Object(l["Z"])((function(e){return[Object(l["k"])("div",m,[Object(l["k"])("img",{src:r.a,class:Object(l["A"])("flag flag-"+e.item.code.toLowerCase())},null,2),Object(l["k"])("div",null,Object(l["T"])(e.item.name),1)])]})),_:1},8,["modelValue","suggestions"]),O,Object(l["o"])(g,{modelValue:k.selectedItem,"onUpdate:modelValue":t[6]||(t[6]=function(e){return k.selectedItem=e}),suggestions:k.filteredItems,onComplete:f.searchItems,virtualScrollerOptions:{itemSize:31},field:"label",dropdown:""},null,8,["modelValue","suggestions","onComplete"]),j,Object(l["k"])("span",h,[Object(l["o"])(g,{multiple:!0,modelValue:k.selectedCountries,"onUpdate:modelValue":t[7]||(t[7]=function(e){return k.selectedCountries=e}),suggestions:k.filteredCountries,onComplete:t[8]||(t[8]=function(e){return f.searchCountry(e)}),field:"name"},null,8,["modelValue","suggestions"])])])]),Object(l["o"])(y)])}var f=n("5530"),v=n("b85c"),g=n("2909"),y=(n("a630"),n("3ca3"),n("498a"),n("4de4"),n("d3b7"),n("2ca0"),n("9066")),C=Object(l["k"])("h5",null,"Import via Module",-1),w=Object(l["k"])("code",null,"\nimport AutoComplete from 'primevue/autocomplete';\n\n",-1),S=[w],I=Object(l["k"])("h5",null,"Import via CDN",-1),A=Object(l["k"])("code",null,'\n<script src="https://unpkg.com/primevue@^3/core/core.min.js"><\/script>\n<script src="https://unpkg.com/primevue@^3/autocomplete/autocomplete.min.js"><\/script>\n\n',-1),F=[A],q=Object(l["k"])("h5",null,"Getting Started",-1),M=Object(l["k"])("p",null,"AutoComplete uses v-model for two-way binding, requires a list of suggestions and a complete method to query for the results. The complete method gets the query text as event.query property and should update the suggestions with the search results. Example below connects to a remote datasource to fetch the results;",-1),L=Object(l["k"])("code",null,'\n<AutoComplete v-model="selectedCountry" :suggestions="filteredCountriesBasic" @complete="searchCountry($event)" field="name" />\n\n',-1),P=[L],T=Object(l["k"])("code",null,"\nexport default {\n\tdata() {\n\t\treturn {\n\t\t\tselectedCountry: null,\n\t\t\tfilteredCountries: null\n\t\t}\n\t},\n\tcountryService: null,\n\tcreated() {\n\t\tthis.countryService = new CountryService();\n\t},\n\tmethods: {\n\t\tsearchCountry(event) {\n            this.filteredCountriesBasic = this.countryService.search(event.query);\n\t\t}\n\t}\n}\n\n",-1),H=[T],B=Object(l["k"])("h5",null,"Dropdown",-1),N=Object(l["k"])("p",null,[Object(l["n"])("Enabling "),Object(l["k"])("i",null,"dropdown"),Object(l["n"])(' property displays a button next to the input field where click behavior of the button is defined using dropdownMode property that takes "blank" or "current" as possible values. "blank" is the default mode to send a query with an empty string whereas "current" setting sends a query with the current value of the input.')],-1),D=Object(l["k"])("code",null,'\n<AutoComplete v-model="brand" :dropdown="true" :suggestions="filteredBrands" @complete="searchBrand($event)" placeholder="Hint: type \'v\' or \'f\'" />\n\n',-1),V=[D],G=Object(l["k"])("h5",null,"Multiple Mode",-1),x=Object(l["k"])("p",null,[Object(l["n"])("Multiple mode is enabled using "),Object(l["k"])("i",null,"multiple"),Object(l["n"])(" property to select more than one value from the autocomplete. In this case, value reference should be an array.")],-1),$=Object(l["k"])("code",null,'\n<AutoComplete :multiple="true" v-model="selectedCountries" :suggestions="filteredCountriesMultiple" @complete="searchCountryMultiple($event)" field="name" />\n\n',-1),Y=[$],U=Object(l["k"])("h5",null,"Objects",-1),E=Object(l["k"])("p",null,[Object(l["n"])("AutoComplete can also work with objects using the "),Object(l["k"])("i",null,"field"),Object(l["n"])(' property that defines the label to display as a suggestion. The value passed to the model would still be the object instance of a suggestion. Here is an example with a Country object that has name and code fields such as {name:"United States",code:"USA"}.')],-1),_=Object(l["k"])("code",null,'\n<AutoComplete field="label" v-model="selectedCountry" :suggestions="filteredCountriesBasic" @complete="searchCountryBasic($event)" />\n\n',-1),J=[_],K=Object(l["k"])("h5",null,"Grouping",-1),W=Object(l["k"])("p",null,[Object(l["n"])("Options groups are specified with the "),Object(l["k"])("i",null,"optionGroupLabel"),Object(l["n"])(" and "),Object(l["k"])("i",null,"optionGroupChildren"),Object(l["n"])(" properties.")],-1),z=Object(l["k"])("code",null,"\nexport default {\n    data() {\n        return {\n            selectedGroupedCity: null,\n            groupedCities: [{\n                label: 'Germany', code: 'DE',\n                items: [\n                    {label: 'Berlin', value: 'Berlin'},\n                    {label: 'Frankfurt', value: 'Frankfurt'},\n                    {label: 'Hamburg', value: 'Hamburg'},\n                    {label: 'Munich', value: 'Munich'}\n                ]\n            },\n            {\n                label: 'USA', code: 'US',\n                items: [\n                    {label: 'Chicago', value: 'Chicago'},\n                    {label: 'Los Angeles', value: 'Los Angeles'},\n                    {label: 'New York', value: 'New York'},\n                    {label: 'San Francisco', value: 'San Francisco'}\n                ]\n            },\n            {\n                label: 'Japan', code: 'JP',\n                items: [\n                    {label: 'Kyoto', value: 'Kyoto'},\n                    {label: 'Osaka', value: 'Osaka'},\n                    {label: 'Tokyo', value: 'Tokyo'},\n                    {label: 'Yokohama', value: 'Yokohama'}\n                ]\n            }]\n        }\n    }\n}\n",-1),Z=[z],R=Object(l["k"])("code",null,[Object(l["k"])("template",null,[Object(l["n"])('\n<AutoComplete v-model="selectedCity" :suggestions="filteredCities" @complete="searchCity($event)"\n    field="label" optionGroupLabel="label" optionGroupChildren="items"></AutoComplete>\n')]),Object(l["n"])("\n")],-1),Q=[R],X=Object(l["k"])("h5",null,"Force Selection",-1),ee=Object(l["k"])("p",null,[Object(l["n"])("ForceSelection mode validates the manual input to check whether it also exists in the suggestions list, if not the input value is cleared to make sure the value passed to the model is always one of the suggestions. Simply enable "),Object(l["k"])("i",null,"forceSelection"),Object(l["n"])(" to enforce that input is always from the suggestion list.")],-1),te=Object(l["k"])("code",null,'\n<AutoComplete forceSelection v-model="brand" :suggestions="filteredBrands" @complete="searchBrand($event)" />\n\n',-1),ne=[te],le=Object(l["k"])("h5",null,"Templating",-1),oe=Object(l["k"])("p",null,[Object(l["n"])("Item template allows displaying custom content inside the suggestions panel. The slotProps variable passed to the template provides an item property to represent an item in the suggestions collection. In addition "),Object(l["k"])("i",null,"optiongroup"),Object(l["n"])(", "),Object(l["k"])("i",null,"chip"),Object(l["n"])(", "),Object(l["k"])("i",null,"header"),Object(l["n"])(" and "),Object(l["k"])("i",null,"footer"),Object(l["n"])(" slots are provided for further customization")],-1),re=Object(l["k"])("code",null,[Object(l["k"])("template",null,[Object(l["n"])('\n<AutoComplete v-model="brand" :suggestions="filteredBrands" @complete="searchBrand($event)" placeholder="Hint: type \'v\' or \'f\'" :dropdown="true">\n    <template #item="slotProps">\n\t\t<img :alt="slotProps.item" :src="\'demo/images/car/\' + slotProps.item + \'.png\'" />\n        <div>{{slotProps.item}}</div>\n\t</template>\n</AutoComplete>\n')]),Object(l["n"])("\n")],-1),ie=[re],ce=Object(l["k"])("h5",null,"Properties",-1),ue=Object(l["k"])("p",null,"Any property such as name and placeholder are passed to the underlying input element. Following are the additional properties to configure the component.",-1),se={class:"doc-tablewrapper"},ae={class:"doc-table"},de=Object(l["k"])("thead",null,[Object(l["k"])("tr",null,[Object(l["k"])("th",null,"Name"),Object(l["k"])("th",null,"Type"),Object(l["k"])("th",null,"Default"),Object(l["k"])("th",null,"Description")])],-1),be=Object(l["k"])("tr",null,[Object(l["k"])("td",null,"modelValue"),Object(l["k"])("td",null,"any"),Object(l["k"])("td",null,"null"),Object(l["k"])("td",null,"Value of the component.")],-1),pe=Object(l["k"])("tr",null,[Object(l["k"])("td",null,"suggestions"),Object(l["k"])("td",null,"array"),Object(l["k"])("td",null,"null"),Object(l["k"])("td",null,"An array of suggestions to display.")],-1),me=Object(l["k"])("tr",null,[Object(l["k"])("td",null,"field"),Object(l["k"])("td",null,"any"),Object(l["k"])("td",null,"null"),Object(l["k"])("td",null,"Property name or getter function of a suggested object to resolve and display.")],-1),Oe=Object(l["k"])("tr",null,[Object(l["k"])("td",null,"optionGroupLabel"),Object(l["k"])("td",null,"string"),Object(l["k"])("td",null,"null"),Object(l["k"])("td",null,"Property name or getter function to use as the label of an option group.")],-1),je=Object(l["k"])("tr",null,[Object(l["k"])("td",null,"optionGroupChildren"),Object(l["k"])("td",null,"string"),Object(l["k"])("td",null,"null"),Object(l["k"])("td",null,"Property name or getter function that refers to the children options of option group.")],-1),he=Object(l["k"])("tr",null,[Object(l["k"])("td",null,"scrollHeight"),Object(l["k"])("td",null,"string"),Object(l["k"])("td",null,"200px"),Object(l["k"])("td",null,"Maximum height of the suggestions panel.")],-1),ke=Object(l["k"])("tr",null,[Object(l["k"])("td",null,"dropdown"),Object(l["k"])("td",null,"boolean"),Object(l["k"])("td",null,"false"),Object(l["k"])("td",null,"Displays a button next to the input field when enabled.")],-1),fe=Object(l["k"])("tr",null,[Object(l["k"])("td",null,"dropdownMode"),Object(l["k"])("td",null,"string"),Object(l["k"])("td",null,"blank"),Object(l["k"])("td",null,'Specifies the behavior dropdown button. Default "blank" mode sends an empty string and "current" mode sends the input value.')],-1),ve=Object(l["k"])("tr",null,[Object(l["k"])("td",null,"autoHighlight"),Object(l["k"])("td",null,"boolean"),Object(l["k"])("td",null,"false"),Object(l["k"])("td",null,"Highlights automatically the first item of the dropdown to be selected.")],-1),ge=Object(l["k"])("tr",null,[Object(l["k"])("td",null,"multiple"),Object(l["k"])("td",null,"boolean"),Object(l["k"])("td",null,"false"),Object(l["k"])("td",null,"Specifies if multiple values can be selected.")],-1),ye=Object(l["k"])("tr",null,[Object(l["k"])("td",null,"minLength"),Object(l["k"])("td",null,"number"),Object(l["k"])("td",null,"1"),Object(l["k"])("td",null,"Minimum number of characters to initiate a search.")],-1),Ce=Object(l["k"])("tr",null,[Object(l["k"])("td",null,"completeOnFocus"),Object(l["k"])("td",null,"boolean"),Object(l["k"])("td",null,"false"),Object(l["k"])("td",null,"Whether to run a query when input receives focus.")],-1),we=Object(l["k"])("tr",null,[Object(l["k"])("td",null,"delay"),Object(l["k"])("td",null,"number"),Object(l["k"])("td",null,"300"),Object(l["k"])("td",null,"Delay between keystrokes to wait before sending a query.")],-1),Se=Object(l["k"])("tr",null,[Object(l["k"])("td",null,"appendTo"),Object(l["k"])("td",null,"string"),Object(l["k"])("td",null,"body"),Object(l["k"])("td",null,'A valid query selector or an HTMLElement to specify where the overlay gets attached. Special keywords are "body" for document body and "self" for the element itself.')],-1),Ie=Object(l["k"])("tr",null,[Object(l["k"])("td",null,"forceSelection"),Object(l["k"])("td",null,"boolean"),Object(l["k"])("td",null,"false"),Object(l["k"])("td",null,"When present, autocomplete clears the manual input if it does not match of the suggestions to force only accepting values from the suggestions.")],-1),Ae=Object(l["k"])("tr",null,[Object(l["k"])("td",null,"inputStyle"),Object(l["k"])("td",null,"any"),Object(l["k"])("td",null,"null"),Object(l["k"])("td",null,"Inline style of the input field.")],-1),Fe=Object(l["k"])("tr",null,[Object(l["k"])("td",null,"inputClass"),Object(l["k"])("td",null,"string"),Object(l["k"])("td",null,"null"),Object(l["k"])("td",null,"Style class of the input field.")],-1),qe=Object(l["k"])("tr",null,[Object(l["k"])("td",null,"style"),Object(l["k"])("td",null,"any"),Object(l["k"])("td",null,"null"),Object(l["k"])("td",null,"Style class of the component input field.")],-1),Me=Object(l["k"])("tr",null,[Object(l["k"])("td",null,"class"),Object(l["k"])("td",null,"string"),Object(l["k"])("td",null,"null"),Object(l["k"])("td",null,"Inline style of the component.")],-1),Le=Object(l["k"])("tr",null,[Object(l["k"])("td",null,"panelClass"),Object(l["k"])("td",null,"string"),Object(l["k"])("td",null,"null"),Object(l["k"])("td",null,"Style class of the overlay panel.")],-1),Pe=Object(l["k"])("tr",null,[Object(l["k"])("td",null,"loadingIcon"),Object(l["k"])("td",null,"string"),Object(l["k"])("td",null,"pi pi-spinner"),Object(l["k"])("td",null,"Icon class used when loading")],-1),Te=Object(l["k"])("td",null,"virtualScrollerOptions",-1),He=Object(l["k"])("td",null,"object",-1),Be=Object(l["k"])("td",null,"null",-1),Ne=Object(l["n"])("Whether to use the virtualScroller feature. The properties of "),De=Object(l["n"])("VirtualScroller"),Ve=Object(l["n"])(" component can be used like an object in it."),Ge=Object(l["k"])("h5",null,"Events",-1),xe=Object(l["k"])("p",null,"Any valid event such as focus, blur and input are passed to the underlying input element. Following are the additional events to configure the component.",-1),$e=Object(l["k"])("div",{class:"doc-tablewrapper"},[Object(l["k"])("table",{class:"doc-table"},[Object(l["k"])("thead",null,[Object(l["k"])("tr",null,[Object(l["k"])("th",null,"Name"),Object(l["k"])("th",null,"Parameters"),Object(l["k"])("th",null,"Description")])]),Object(l["k"])("tbody",null,[Object(l["k"])("tr",null,[Object(l["k"])("td",null,"complete"),Object(l["k"])("td",null,[Object(l["n"])(" event.originalEvent: Browser event "),Object(l["k"])("br"),Object(l["n"])(" event.query: Value to search with ")]),Object(l["k"])("td",null,"Callback to invoke to search for suggestions.")]),Object(l["k"])("tr",null,[Object(l["k"])("td",null,"item-select"),Object(l["k"])("td",null,[Object(l["n"])("event.originalEvent: Browser event "),Object(l["k"])("br"),Object(l["n"])(" event.value: Selected item")]),Object(l["k"])("td",null,"Callback to invoke when a suggestion is selected.")]),Object(l["k"])("tr",null,[Object(l["k"])("td",null,"item-unselect"),Object(l["k"])("td",null,[Object(l["n"])("event.originalEvent: Browser event "),Object(l["k"])("br"),Object(l["n"])(" event.value: Unselected item")]),Object(l["k"])("td",null,"Callback to invoke when a selected value is removed.")]),Object(l["k"])("tr",null,[Object(l["k"])("td",null,"dropdown-click"),Object(l["k"])("td",null,[Object(l["n"])(" event.originalEvent: browser event "),Object(l["k"])("br"),Object(l["n"])(" event.query: Current value of the input field ")]),Object(l["k"])("td",null,"Callback to invoke to when dropdown button is clicked.")]),Object(l["k"])("tr",null,[Object(l["k"])("td",null,"clear"),Object(l["k"])("td",null,"-"),Object(l["k"])("td",null,"Callback to invoke when input is cleared by the user.")])])])],-1),Ye=Object(l["k"])("h5",null,"Slots",-1),Ue=Object(l["k"])("div",{class:"doc-tablewrapper"},[Object(l["k"])("table",{class:"doc-table"},[Object(l["k"])("thead",null,[Object(l["k"])("tr",null,[Object(l["k"])("th",null,"Name"),Object(l["k"])("th",null,"Parameters")])]),Object(l["k"])("tbody",null,[Object(l["k"])("tr",null,[Object(l["k"])("td",null,"item"),Object(l["k"])("td",null,[Object(l["n"])("item: Option instance "),Object(l["k"])("br"),Object(l["n"])(" index: Index of the option")])]),Object(l["k"])("tr",null,[Object(l["k"])("td",null,"optiongroup"),Object(l["k"])("td",null,[Object(l["n"])("item: OptionGroup instance "),Object(l["k"])("br"),Object(l["n"])(" index: Index of the option group")])]),Object(l["k"])("tr",null,[Object(l["k"])("td",null,"header"),Object(l["k"])("td",null,[Object(l["n"])("value: Value of the component "),Object(l["k"])("br"),Object(l["n"])(" suggestions: Displayed options")])]),Object(l["k"])("tr",null,[Object(l["k"])("td",null,"footer"),Object(l["k"])("td",null,[Object(l["n"])("value: Value of the component "),Object(l["k"])("br"),Object(l["n"])(" suggestions: Displayed options")])]),Object(l["k"])("tr",null,[Object(l["k"])("td",null,"chip"),Object(l["k"])("td",null,"value: A value in the selection")]),Object(l["k"])("tr",null,[Object(l["k"])("td",null,"content"),Object(l["k"])("td",null,[Object(l["n"])("items: An array of objects to display for virtualscroller"),Object(l["k"])("br"),Object(l["n"])(" styleClass: Style class of the component"),Object(l["k"])("br"),Object(l["n"])(" contentRef: Referance of the content"),Object(l["k"])("br"),Object(l["n"])(" getItemOptions: Options of the items")])]),Object(l["k"])("tr",null,[Object(l["k"])("td",null,"loader"),Object(l["k"])("td",null,"options: Options of the loader items for virtualscroller")])])])],-1),Ee=Object(l["k"])("h5",null,"Styling",-1),_e=Object(l["k"])("p",null,"Following is the list of structural style classes",-1),Je=Object(l["k"])("div",{class:"doc-tablewrapper"},[Object(l["k"])("table",{class:"doc-table"},[Object(l["k"])("thead",null,[Object(l["k"])("tr",null,[Object(l["k"])("th",null,"Name"),Object(l["k"])("th",null,"Element")])]),Object(l["k"])("tbody",null,[Object(l["k"])("tr",null,[Object(l["k"])("td",null,"p-autocomplete"),Object(l["k"])("td",null,"Container element")]),Object(l["k"])("tr",null,[Object(l["k"])("td",null,"p-autocomplete-panel"),Object(l["k"])("td",null,"Overlay panel of suggestions.")]),Object(l["k"])("tr",null,[Object(l["k"])("td",null,"p-autocomplete-items"),Object(l["k"])("td",null,"List container of suggestions.")]),Object(l["k"])("tr",null,[Object(l["k"])("td",null,"p-autocomplete-item"),Object(l["k"])("td",null,"List item of a suggestion.")]),Object(l["k"])("tr",null,[Object(l["k"])("td",null,"p-autocomplete-token"),Object(l["k"])("td",null,"Element of a selected item in multiple mode.")]),Object(l["k"])("tr",null,[Object(l["k"])("td",null,"p-autocomplete-token-icon"),Object(l["k"])("td",null,"Close icon element of a selected item in multiple mode.")]),Object(l["k"])("tr",null,[Object(l["k"])("td",null,"p-autocomplete-token-label"),Object(l["k"])("td",null,"Label of a selected item in multiple mode.")])])])],-1),Ke=Object(l["k"])("h5",null,"Dependencies",-1),We=Object(l["k"])("p",null,"None.",-1);function ze(e,t,n,o,r,i){var c=Object(l["P"])("router-link"),u=Object(l["P"])("AppDoc"),s=Object(l["Q"])("code");return Object(l["H"])(),Object(l["h"])(u,{name:"AutoCompleteDemo",sources:r.sources,service:["CountryService"],data:["countries"],github:"autocomplete/AutoCompleteDemo.vue"},{default:Object(l["Z"])((function(){return[C,Object(l["ab"])((Object(l["H"])(),Object(l["j"])("pre",null,S)),[[s,void 0,void 0,{script:!0}]]),I,Object(l["ab"])((Object(l["H"])(),Object(l["j"])("pre",null,F)),[[s]]),q,M,Object(l["ab"])((Object(l["H"])(),Object(l["j"])("pre",null,P)),[[s]]),Object(l["ab"])((Object(l["H"])(),Object(l["j"])("pre",null,H)),[[s,void 0,void 0,{script:!0}]]),B,N,Object(l["ab"])((Object(l["H"])(),Object(l["j"])("pre",null,V)),[[s]]),G,x,Object(l["ab"])((Object(l["H"])(),Object(l["j"])("pre",null,Y)),[[s]]),U,E,Object(l["ab"])((Object(l["H"])(),Object(l["j"])("pre",null,J)),[[s]]),K,W,Object(l["ab"])((Object(l["H"])(),Object(l["j"])("pre",null,Z)),[[s,void 0,void 0,{script:!0}]]),Object(l["ab"])((Object(l["H"])(),Object(l["j"])("pre",null,Q)),[[s]]),X,ee,Object(l["ab"])((Object(l["H"])(),Object(l["j"])("pre",null,ne)),[[s]]),le,oe,Object(l["ab"])((Object(l["H"])(),Object(l["j"])("pre",null,ie)),[[s]]),ce,ue,Object(l["k"])("div",se,[Object(l["k"])("table",ae,[de,Object(l["k"])("tbody",null,[be,pe,me,Oe,je,he,ke,fe,ve,ge,ye,Ce,we,Se,Ie,Ae,Fe,qe,Me,Le,Pe,Object(l["k"])("tr",null,[Te,He,Be,Object(l["k"])("td",null,[Ne,Object(l["o"])(c,{to:"/virtualscroller"},{default:Object(l["Z"])((function(){return[De]})),_:1}),Ve])])])])]),Ge,xe,$e,Ye,Ue,Ee,_e,Je,Ke,We]})),_:1},8,["sources"])}var Ze={data:function(){return{sources:{"options-api":{tabName:"Options API Source",content:'\n<template>\n    <div>\n        <div>\n            <h5>Basic</h5>\n            <AutoComplete v-model="selectedCountry1" :suggestions="filteredCountries" @complete="searchCountry($event)" field="name" />\n\n            <h5>Grouped</h5>\n            <AutoComplete v-model="selectedCity" :suggestions="filteredCities" @complete="searchCity($event)" field="label" optionGroupLabel="label" optionGroupChildren="items">\n                <template #optiongroup="slotProps">\n                    <div class="flex align-items-center country-item">\n                        <img src="https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png" width="18" />\n                        <div class="ml-2">{{slotProps.item.label}}</div>\n                    </div>\n                </template>\n            </AutoComplete>\n\n            <h5>Dropdown, Templating and Force Selection</h5>\n            <AutoComplete v-model="selectedCountry2" :suggestions="filteredCountries" @complete="searchCountry($event)" :dropdown="true" field="name" forceSelection>\n                <template #item="slotProps">\n                    <div class="country-item">\n                        <img src="https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png" width="18" />\n                        <div class="ml-2">{{slotProps.item.name}}</div>\n                    </div>\n                </template>\n            </AutoComplete>\n\n            <h5>Virtual Scroll (1000 Items)</h5>\n            <AutoComplete v-model="selectedItem" :suggestions="filteredItems" @complete="searchItems" :virtualScrollerOptions="{ itemSize: 31 }" field="label" dropdown />\n\n            <h5>Multiple</h5>\n            <span class="p-fluid">\n                <AutoComplete :multiple="true" v-model="selectedCountries" :suggestions="filteredCountries" @complete="searchCountry($event)" field="name" />\n            </span>\n        </div>\n    </div>\n</template>\n\n<script>\nimport CountryService from \'./service/CountryService\';\nimport {FilterService,FilterMatchMode} from \'primevue/api\';\n\nexport default {\n    data() {\n        return {\n            countries: null,\n            selectedCountry1: null,\n            selectedCountry2: null,\n            selectedCity: null,\n            filteredCities: null,\n            filteredCountries: null,\n            selectedCountries: [],\n            selectedItem: null,\n            filteredItems: null,\n            groupedCities: [{\n                label: \'Germany\', code: \'DE\',\n                items: [\n                    {label: \'Berlin\', value: \'Berlin\'},\n                    {label: \'Frankfurt\', value: \'Frankfurt\'},\n                    {label: \'Hamburg\', value: \'Hamburg\'},\n                    {label: \'Munich\', value: \'Munich\'}\n                ]\n            },\n            {\n                label: \'USA\', code: \'US\',\n                items: [\n                    {label: \'Chicago\', value: \'Chicago\'},\n                    {label: \'Los Angeles\', value: \'Los Angeles\'},\n                    {label: \'New York\', value: \'New York\'},\n                    {label: \'San Francisco\', value: \'San Francisco\'}\n                ]\n            },\n            {\n                label: \'Japan\', code: \'JP\',\n                items: [\n                    {label: \'Kyoto\', value: \'Kyoto\'},\n                    {label: \'Osaka\', value: \'Osaka\'},\n                    {label: \'Tokyo\', value: \'Tokyo\'},\n                    {label: \'Yokohama\', value: \'Yokohama\'}\n                ]\n            }],\n            items: Array.from({ length: 1000 }, (_, i) => ({ label: `Item #${i}`, value: i }))\n        }\n    },\n    countryService: null,\n    created() {\n        this.countryService = new CountryService();\n    },\n    mounted() {\n        this.countryService.getCountries().then(data => this.countries = data);\n    },\n    methods: {\n        searchCountry(event) {\n            setTimeout(() => {\n                if (!event.query.trim().length) {\n                    this.filteredCountries = [...this.countries];\n                }\n                else {\n                    this.filteredCountries = this.countries.filter((country) => {\n                        return country.name.toLowerCase().startsWith(event.query.toLowerCase());\n                    });\n                }\n            }, 250);\n        },\n        searchCity(event) {\n            let query = event.query;\n            let filteredCities = [];\n\n            for (let country of this.groupedCities) {\n                let filteredItems = FilterService.filter(country.items, [\'label\'], query, FilterMatchMode.CONTAINS);\n                if (filteredItems && filteredItems.length) {\n                    filteredCities.push({...country, ...{items: filteredItems}});\n                }\n            }\n\n            this.filteredCities = filteredCities;\n        },\n        searchItems(event) {\n            //in a real application, make a request to a remote url with the query and return filtered results, for demo we filter at client side\n            let query = event.query;\n            let filteredItems = [];\n\n            for(let i = 0; i < this.items.length; i++) {\n                let item = this.items[i];\n                if (item.label.toLowerCase().indexOf(query.toLowerCase()) === 0) {\n                    filteredItems.push(item);\n                }\n            }\n\n            this.filteredItems = filteredItems;\n        }\n    }\n}\n<\\/script>'},"composition-api":{tabName:"Composition API Source",content:'\n<template>\n    <div>\n        <div>\n            <h5>Basic</h5>\n            <AutoComplete v-model="selectedCountry1" :suggestions="filteredCountries" @complete="searchCountry($event)" field="name" />\n\n            <h5>Grouped</h5>\n            <AutoComplete v-model="selectedCity" :suggestions="filteredCities" @complete="searchCity($event)" field="label" optionGroupLabel="label" optionGroupChildren="items">\n                <template #optiongroup="slotProps">\n                    <div class="flex align-items-center country-item">\n                        <img src="https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png" width="18" />\n                        <div class="ml-2">{{slotProps.item.label}}</div>\n                    </div>\n                </template>\n            </AutoComplete>\n\n            <h5>Dropdown, Templating and Force Selection</h5>\n            <AutoComplete v-model="selectedCountry2" :suggestions="filteredCountries" @complete="searchCountry($event)" :dropdown="true" field="name" forceSelection>\n                <template #item="slotProps">\n                    <div class="country-item">\n                        <img src="https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png" width="18" />\n                        <div class="ml-2">{{slotProps.item.name}}</div>\n                    </div>\n                </template>\n            </AutoComplete>\n\n            <h5>Virtual Scroll (1000 Items)</h5>\n            <AutoComplete v-model="selectedItem" :suggestions="filteredItems" @complete="searchItems" :virtualScrollerOptions="{ itemSize: 31 }" field="label" dropdown />\n\n            <h5>Multiple</h5>\n            <span class="p-fluid">\n                <AutoComplete :multiple="true" v-model="selectedCountries" :suggestions="filteredCountries" @complete="searchCountry($event)" field="name" />\n            </span>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { ref, onMounted } from \'vue\';\nimport CountryService from \'./service/CountryService\';\nimport {FilterService,FilterMatchMode} from \'primevue/api\';\n\nexport default {\n    setup() {\n        onMounted(() => {\n            countryService.value.getCountries().then(data => countries.value = data);\n        })\n\n        const countries = ref();\n        const countryService = ref(new CountryService());\n        const selectedCountry1 = ref();\n        const selectedCountry2 = ref();\n        const selectedCity = ref();\n        const filteredCities = ref();\n        const filteredCountries = ref();\n        const selectedCountries = ref([]);\n        const selectedItem = ref();\n        const filteredItems = ref();\n        const groupedCities = ref ([{\n            label: \'Germany\', code: \'DE\',\n            items: [\n                {label: \'Berlin\', value: \'Berlin\'},\n                {label: \'Frankfurt\', value: \'Frankfurt\'},\n                {label: \'Hamburg\', value: \'Hamburg\'},\n                {label: \'Munich\', value: \'Munich\'}\n            ]\n        },\n        {\n            label: \'USA\', code: \'US\',\n            items: [\n                {label: \'Chicago\', value: \'Chicago\'},\n                {label: \'Los Angeles\', value: \'Los Angeles\'},\n                {label: \'New York\', value: \'New York\'},\n                {label: \'San Francisco\', value: \'San Francisco\'}\n            ]\n        },\n        {\n            label: \'Japan\', code: \'JP\',\n            items: [\n                {label: \'Kyoto\', value: \'Kyoto\'},\n                {label: \'Osaka\', value: \'Osaka\'},\n                {label: \'Tokyo\', value: \'Tokyo\'},\n                {label: \'Yokohama\', value: \'Yokohama\'}\n            ]\n        }]);\n        const items = Array.from({ length: 1000 }, (_, i) => ({ label: `Item #${i}`, value: i }));\n\n        const searchCountry = (event) => {\n            setTimeout(() => {\n                if (!event.query.trim().length) {\n                    filteredCountries.value = [...countries.value];\n                }\n                else {\n                    filteredCountries.value = countries.value.filter((country) => {\n                        return country.name.toLowerCase().startsWith(event.query.toLowerCase());\n                    });\n                }\n            }, 250);\n        };\n        const searchCity = (event) => {\n            let query = event.query;\n            let newFilteredCities = [];\n\n            for (let country of groupedCities.value) {\n                let filteredItems = FilterService.filter(country.items, [\'label\'], query, FilterMatchMode.CONTAINS);\n                if (filteredItems && filteredItems.length) {\n                    newFilteredCities.push({...country, ...{items: filteredItems}});\n                }\n            }\n\n            filteredCities.value = newFilteredCities;\n        }\n        const searchItems = (event) => {\n            //in a real application, make a request to a remote url with the query and return filtered results, for demo we filter at client side\n            let query = event.query;\n            let _filteredItems = [];\n\n            for(let i = 0; i < this.items.length; i++) {\n                let item = this.items[i];\n                if (item.label.toLowerCase().indexOf(query.toLowerCase()) === 0) {\n                    _filteredItems.push(item);\n                }\n            }\n\n            filteredItems.value = _filteredItems;\n        }\n\n        return { countries, countryService, selectedCountry1, selectedCountry2, selectedCity, filteredCities, filteredCountries, selectedCountries, groupedCities, searchCountry, searchCity, searchItems, selectedItem, filteredItems, items }\n    }\n}\n<\\/script>'},"browser-source":{tabName:"Browser Source",imports:'<script src="https://unpkg.com/primevue@^3/autocomplete/autocomplete.min.js"><\\/script>\n        <script src="./CountryService.js"><\\/script>',content:'<div id="app">\n            <h5>Basic</h5>\n            <p-autocomplete v-model="selectedCountry1" :suggestions="filteredCountries" @complete="searchCountry($event)" field="name"></p-autocomplete>\n\n            <h5>Grouped</h5>\n            <p-autocomplete v-model="selectedCity" :suggestions="filteredCities" @complete="searchCity($event)" field="label" option-group-label="label" option-group-children="items">\n                <template #optiongroup="slotProps">\n                    <div class="flex align-items-center country-item">\n                        <img src="https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png" width="18" />\n                        <div class="ml-2">{{slotProps.item.label}}</div>\n                    </div>\n                </template>\n            </p-autocomplete>\n\n            <h5>Dropdown, Templating and Force Selection</h5>\n            <p-autocomplete v-model="selectedCountry2" :suggestions="filteredCountries" @complete="searchCountry($event)" :dropdown="true" field="name" force-selection>\n                <template #item="slotProps">\n                    <div class="country-item">\n                        <img src="https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png" width="18" />\n                        <div class="ml-2">{{slotProps.item.name}}</div>\n                    </div>\n                </template>\n            </p-autocomplete>\n\n            <h5>Virtual Scroll (1000 Items)</h5>\n            <p-autocomplete v-model="selectedItem" :suggestions="filteredItems" @complete="searchItems" :virtual-scroller-options="{ itemSize: 31 }" field="label" dropdown></p-autocomplete>\n\n            <h5>Multiple</h5>\n            <span class="p-fluid">\n                <p-autocomplete :multiple="true" v-model="selectedCountries" :suggestions="filteredCountries" @complete="searchCountry($event)" field="name"></p-autocomplete>\n            </span>\n        </div>\n\n        <script type="module">\n        const { createApp, ref, onMounted } = Vue;\n        const { FilterService,FilterMatchMode } = primevue.api;\n\n        const App = {\n            setup() {\n                onMounted(() => {\n                    countryService.value.getCountries().then(data => countries.value = data);\n                })\n\n                const countries = ref();\n                const countryService = ref(new CountryService());\n                const selectedCountry1 = ref();\n                const selectedCountry2 = ref();\n                const selectedCity = ref();\n                const filteredCities = ref();\n                const filteredCountries = ref();\n                const selectedCountries = ref([]);\n                const selectedItem = ref();\n                const filteredItems = ref();\n                const groupedCities = ref ([{\n                    label: \'Germany\', code: \'DE\',\n                    items: [\n                        {label: \'Berlin\', value: \'Berlin\'},\n                        {label: \'Frankfurt\', value: \'Frankfurt\'},\n                        {label: \'Hamburg\', value: \'Hamburg\'},\n                        {label: \'Munich\', value: \'Munich\'}\n                    ]\n                },\n                {\n                    label: \'USA\', code: \'US\',\n                    items: [\n                        {label: \'Chicago\', value: \'Chicago\'},\n                        {label: \'Los Angeles\', value: \'Los Angeles\'},\n                        {label: \'New York\', value: \'New York\'},\n                        {label: \'San Francisco\', value: \'San Francisco\'}\n                    ]\n                },\n                {\n                    label: \'Japan\', code: \'JP\',\n                    items: [\n                        {label: \'Kyoto\', value: \'Kyoto\'},\n                        {label: \'Osaka\', value: \'Osaka\'},\n                        {label: \'Tokyo\', value: \'Tokyo\'},\n                        {label: \'Yokohama\', value: \'Yokohama\'}\n                    ]\n                }]);\n                const items = Array.from({ length: 1000 }, (_, i) => ({ label: `Item #${i}`, value: i }));\n\n                const searchCountry = (event) => {\n                    setTimeout(() => {\n                        if (!event.query.trim().length) {\n                            filteredCountries.value = [...countries.value];\n                        }\n                        else {\n                            filteredCountries.value = countries.value.filter((country) => {\n                                return country.name.toLowerCase().startsWith(event.query.toLowerCase());\n                            });\n                        }\n                    }, 250);\n                };\n                const searchCity = (event) => {\n                    let query = event.query;\n                    let newFilteredCities = [];\n\n                    for (let country of groupedCities.value) {\n                        let filteredItems = FilterService.filter(country.items, [\'label\'], query, FilterMatchMode.CONTAINS);\n                        if (filteredItems && filteredItems.length) {\n                            newFilteredCities.push({...country, ...{items: filteredItems}});\n                        }\n                    }\n\n                    filteredCities.value = newFilteredCities;\n                };\n                const searchItems = (event) => {\n                    //in a real application, make a request to a remote url with the query and return filtered results, for demo we filter at client side\n                    let query = event.query;\n                    let _filteredItems = [];\n\n                    for(let i = 0; i < this.items.length; i++) {\n                        let item = this.items[i];\n                        if (item.label.toLowerCase().indexOf(query.toLowerCase()) === 0) {\n                            _filteredItems.push(item);\n                        }\n                    }\n\n                    filteredItems.value = _filteredItems;\n                }\n\n                return { countries, countryService, selectedCountry1, selectedCountry2, selectedCity, filteredCities, filteredCountries, selectedCountries, groupedCities, searchCountry, searchCity, searchItems, selectedItem, filteredItems, items }\n            },\n            components: {\n                "p-autocomplete": primevue.autocomplete\n            }\n        };\n\n        createApp(App)\n            .use(primevue.config.default)\n            .mount("#app");\n        <\\/script>'}}}}},Re=n("6b0d"),Qe=n.n(Re);const Xe=Qe()(Ze,[["render",ze]]);var et=Xe,tt=n("bcab"),nt={data:function(){return{countries:null,selectedCountry1:null,selectedCountry2:null,selectedCity:null,filteredCities:null,filteredCountries:null,selectedCountries:[],selectedItem:null,filteredItems:null,groupedCities:[{label:"Germany",code:"DE",items:[{label:"Berlin",value:"Berlin"},{label:"Frankfurt",value:"Frankfurt"},{label:"Hamburg",value:"Hamburg"},{label:"Munich",value:"Munich"}]},{label:"USA",code:"US",items:[{label:"Chicago",value:"Chicago"},{label:"Los Angeles",value:"Los Angeles"},{label:"New York",value:"New York"},{label:"San Francisco",value:"San Francisco"}]},{label:"Japan",code:"JP",items:[{label:"Kyoto",value:"Kyoto"},{label:"Osaka",value:"Osaka"},{label:"Tokyo",value:"Tokyo"},{label:"Yokohama",value:"Yokohama"}]}],items:Array.from({length:1e3},(function(e,t){return{label:"Item #".concat(t),value:t}}))}},countryService:null,created:function(){this.countryService=new y["a"]},mounted:function(){var e=this;this.countryService.getCountries().then((function(t){return e.countries=t}))},methods:{searchCountry:function(e){var t=this;setTimeout((function(){e.query.trim().length?t.filteredCountries=t.countries.filter((function(t){return t.name.toLowerCase().startsWith(e.query.toLowerCase())})):t.filteredCountries=Object(g["a"])(t.countries)}),250)},searchCity:function(e){var t,n=e.query,l=[],o=Object(v["a"])(this.groupedCities);try{for(o.s();!(t=o.n()).done;){var r=t.value,i=tt["c"].filter(r.items,["label"],n,tt["a"].CONTAINS);i&&i.length&&l.push(Object(f["a"])(Object(f["a"])({},r),{items:i}))}}catch(c){o.e(c)}finally{o.f()}this.filteredCities=l},searchItems:function(e){for(var t=e.query,n=[],l=0;l<this.items.length;l++){var o=this.items[l];0===o.label.toLowerCase().indexOf(t.toLowerCase())&&n.push(o)}this.filteredItems=n}},components:{AutoCompleteDoc:et}};const lt=Qe()(nt,[["render",k]]);t["default"]=lt}}]);