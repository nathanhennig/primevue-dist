(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-4994a4c5"],{"15bc":function(n,e,o){var t=o("cda3");t.__esModule&&(t=t.default),"string"===typeof t&&(t=[[n.i,t,""]]),t.locals&&(n.exports=t.locals);var d=o("499e").default;d("b098a100",t,!0,{sourceMap:!1,shadowMode:!1})},5814:function(n,e,o){"use strict";o("15bc")},"7a8d":function(n,e,o){"use strict";o.r(e);var t=o("7a23"),d=function(n){return Object(t["K"])("data-v-723ec2ca"),n=n(),Object(t["I"])(),n},a={class:"content-section introduction"},i=d((function(){return Object(t["k"])("div",{class:"feature-intro"},[Object(t["k"])("h1",null,[Object(t["n"])("Tree "),Object(t["k"])("span",null,"Lazy")]),Object(t["k"])("p",null,"Lazy loading is handy when dealing with huge datasets. This example imitates a lazy loading case with timeouts.")],-1)})),l={class:"content-section implementation"},s={class:"card"};function r(n,e,o,d,r,c){var u=Object(t["P"])("AppDemoActions"),p=Object(t["P"])("Tree"),f=Object(t["P"])("AppDoc");return Object(t["H"])(),Object(t["j"])("div",null,[Object(t["k"])("div",a,[i,Object(t["o"])(u)]),Object(t["k"])("div",l,[Object(t["k"])("div",s,[Object(t["o"])(p,{value:r.nodes,onNodeExpand:c.onNodeExpand,loading:r.loading},null,8,["value","onNodeExpand","loading"])])]),Object(t["o"])(f,{name:"TreeLazyDemo",sources:r.sources,service:["NodeService"],data:["treenodes"],github:"tree/TreeLazyDemo.vue"},null,8,["sources"])])}var c=o("5530"),u=o("82f4"),p={data:function(){return{loading:!1,nodes:null,sources:{"options-api":{tabName:"Options API Source",content:"\n<template>\n    <div>\n        <Tree :value=\"nodes\" @nodeExpand=\"onNodeExpand\" :loading=\"loading\"></Tree>\n    </div>                   \n</template>\n\n<script>\nimport NodeService from './service/NodeService';\n\nexport default {\n    data() {\n        return {\n            loading: false,\n            nodes: null\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n    },\n    mounted() {\n        this.loading = true;\n\n        setTimeout(() => {\n            this.nodes = this.initateNodes();\n            this.loading = false;\n        }, 2000);\n    },\n    methods: {\n        onNodeExpand(node) {\n            if (!node.children) {\n                this.loading = true;\n\n                setTimeout(() => {\n                    let _node = {...node};\n                    _node.children = [];\n\n                    for (let i = 0; i < 3; i++) {\n                        _node.children.push({\n                            key: node.key + '-' + i,\n                            label: 'Lazy ' + node.label + '-' + i\n                        });\n                    }\n\n                    let _nodes = {...this.nodes}\n                    _nodes[parseInt(node.key, 10)] = _node;\n\n                    this.nodes = _nodes;\n                    this.loading = false;\n                }, 500);\n            }\n        },\n        initateNodes() {\n            return [{\n                key: '0',\n                label: 'Node 0',\n                leaf: false\n            },\n            {\n                key: '1',\n                label: 'Node 1',\n                leaf: false\n            },\n            {\n                key: '2',\n                label: 'Node 2',\n                leaf: false\n            }];\n        }\n    }\n}\n<\\/script>\n"},"composition-api":{tabName:"Composition API Source",content:"\n<template>\n    <div>\n        <Tree :value=\"nodes\" @nodeExpand=\"onNodeExpand\" :loading=\"loading\"></Tree>\n    </div>                   \n</template>\n\n<script>\nimport { ref, onMounted } from 'vue';\nimport NodeService from './service/NodeService';\n\nexport default {\n    setup() {\n        onMounted(() => {\n            loading.value = true;\n\n            setTimeout(() => {\n                nodes.value = initateNodes();\n                loading.value = false;\n            }, 2000);\n        })\n\n        const loading = ref(false);\n        const nodes = ref(null);\n        const nodeService = ref(new NodeService());\n        const onNodeExpand = (node) => {\n            if (!node.children) {\n                loading.value = true;\n\n                setTimeout(() => {\n                    let _node = {...node};\n                    _node.children = [];\n\n                    for (let i = 0; i < 3; i++) {\n                        _node.children.push({\n                            key: node.key + '-' + i,\n                            label: 'Lazy ' + node.label + '-' + i\n                        });\n                    }\n\n                    let _nodes = {...nodes.value}\n                    _nodes[parseInt(node.key, 10)] = _node;\n\n                    nodes.value = _nodes;\n                    loading.value = false;\n                }, 500);\n            }\n        };\n\n        const initateNodes = () => {\n            return [{\n                key: '0',\n                label: 'Node 0',\n                leaf: false\n            },\n            {\n                key: '1',\n                label: 'Node 1',\n                leaf: false\n            },\n            {\n                key: '2',\n                label: 'Node 2',\n                leaf: false\n            }];\n        }\n\n        return { loading, nodes, nodeService, onNodeExpand, initateNodes }\n    }\n}\n<\\/script>\n"},"browser-source":{tabName:"Browser Source",imports:'<script src="./NodeService.js"><\\/script>',content:"<div id=\"app\">\n            <p-tree :value=\"nodes\" @node-expand=\"onNodeExpand\" :loading=\"loading\"></p-tree>\n        </div>                   \n\n        <script type=\"module\">\n        const { createApp, ref, onMounted } = Vue;\n\n        const App = {\n            setup() {\n                onMounted(() => {\n                    loading.value = true;\n\n                    setTimeout(() => {\n                        nodes.value = initateNodes();\n                        loading.value = false;\n                    }, 2000);\n                })\n\n                const loading = ref(false);\n                const nodes = ref(null);\n                const nodeService = ref(new NodeService());\n                const onNodeExpand = (node) => {\n                    if (!node.children) {\n                        loading.value = true;\n\n                        setTimeout(() => {\n                            let _node = {...node};\n                            _node.children = [];\n\n                            for (let i = 0; i < 3; i++) {\n                                _node.children.push({\n                                    key: node.key + '-' + i,\n                                    label: 'Lazy ' + node.label + '-' + i\n                                });\n                            }\n\n                            let _nodes = {...nodes.value}\n                            _nodes[parseInt(node.key, 10)] = _node;\n\n                            nodes.value = _nodes;\n                            loading.value = false;\n                        }, 500);\n                    }\n                };\n\n                const initateNodes = () => {\n                    return [{\n                        key: '0',\n                        label: 'Node 0',\n                        leaf: false\n                    },\n                    {\n                        key: '1',\n                        label: 'Node 1',\n                        leaf: false\n                    },\n                    {\n                        key: '2',\n                        label: 'Node 2',\n                        leaf: false\n                    }];\n                }\n\n                return { loading, nodes, nodeService, onNodeExpand, initateNodes }\n            },\n            components: {\n                \"p-tree\": primevue.tree\n            }\n        };\n\n        createApp(App)\n            .use(primevue.config.default)\n            .mount(\"#app\");\n        <\\/script>\n"}}}},nodeService:null,created:function(){this.nodeService=new u["a"]},mounted:function(){var n=this;this.loading=!0,setTimeout((function(){n.nodes=n.initateNodes(),n.loading=!1}),2e3)},methods:{onNodeExpand:function(n){var e=this;n.children||(this.loading=!0,setTimeout((function(){var o=Object(c["a"])({},n);o.children=[];for(var t=0;t<3;t++)o.children.push({key:n.key+"-"+t,label:"Lazy "+n.label+"-"+t});var d=Object(c["a"])({},e.nodes);d[parseInt(n.key,10)]=o,e.nodes=d,e.loading=!1}),500))},initateNodes:function(){return[{key:"0",label:"Node 0",leaf:!1},{key:"1",label:"Node 1",leaf:!1},{key:"2",label:"Node 2",leaf:!1}]}}},f=(o("5814"),o("6b0d")),v=o.n(f);const b=v()(p,[["render",r],["__scopeId","data-v-723ec2ca"]]);e["default"]=b},cda3:function(n,e,o){var t=o("24fb");e=t(!1),e.push([n.i,"button[data-v-723ec2ca]{margin-right:.5rem}",""]),n.exports=e}}]);