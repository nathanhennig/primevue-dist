(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0c94bf"],{5916:function(l,e,n){"use strict";n.r(e);var t=n("7a23"),a={class:"content-section introduction"},c=Object(t["k"])("div",{class:"feature-intro"},[Object(t["k"])("h1",null,"InputMask"),Object(t["k"])("p",null,"InputMask component is used to enter input in a certain format such as numeric, date, currency, email and phone.")],-1),o={class:"content-section implementation"},d={class:"card"},s={class:"p-fluid formgrid grid"},u={class:"field col-12 md:col-4"},i=Object(t["k"])("label",{for:"basic"},"Basic",-1),r={class:"field col-12 md:col-4"},b=Object(t["k"])("label",{for:"ssn"},"SSN",-1),p={class:"field col-12 md:col-4"},m=Object(t["k"])("label",{for:"date"},"Date",-1),k={class:"field col-12 md:col-4"},v=Object(t["k"])("label",{for:"Phone"},"Phone",-1),j={class:"field col-12 md:col-4"},O=Object(t["k"])("label",{for:"phoneext"},"Phone Ext",-1),f={class:"field col-12 md:col-4"},h=Object(t["k"])("label",{for:"serial"},"Serial",-1);function y(l,e,n,y,I,g){var M=Object(t["P"])("AppDemoActions"),V=Object(t["P"])("InputMask"),x=Object(t["P"])("InputMaskDoc");return Object(t["H"])(),Object(t["j"])("div",null,[Object(t["k"])("div",a,[c,Object(t["o"])(M)]),Object(t["k"])("div",o,[Object(t["k"])("div",d,[Object(t["k"])("div",s,[Object(t["k"])("div",u,[i,Object(t["o"])(V,{mask:"99-999999",modelValue:I.val1,"onUpdate:modelValue":e[0]||(e[0]=function(l){return I.val1=l}),placeholder:"99-999999"},null,8,["modelValue"])]),Object(t["k"])("div",r,[b,Object(t["o"])(V,{mask:"999-99-9999",modelValue:I.val2,"onUpdate:modelValue":e[1]||(e[1]=function(l){return I.val2=l}),placeholder:"999-99-9999"},null,8,["modelValue"])]),Object(t["k"])("div",p,[m,Object(t["o"])(V,{mask:"99/99/9999",modelValue:I.val3,"onUpdate:modelValue":e[2]||(e[2]=function(l){return I.val3=l}),placeholder:"99/99/9999",slotChar:"mm/dd/yyyy"},null,8,["modelValue"])]),Object(t["k"])("div",k,[v,Object(t["o"])(V,{mask:"(999) 999-9999",modelValue:I.val4,"onUpdate:modelValue":e[3]||(e[3]=function(l){return I.val4=l}),placeholder:"(999) 999-9999"},null,8,["modelValue"])]),Object(t["k"])("div",j,[O,Object(t["o"])(V,{mask:"(999) 999-9999? x99999",modelValue:I.val5,"onUpdate:modelValue":e[4]||(e[4]=function(l){return I.val5=l}),placeholder:"(999) 999-9999? x99999"},null,8,["modelValue"])]),Object(t["k"])("div",f,[h,Object(t["o"])(V,{mask:"a*-999-a999",modelValue:I.val6,"onUpdate:modelValue":e[5]||(e[5]=function(l){return I.val6=l}),placeholder:"a*-999-a999"},null,8,["modelValue"])])])])]),Object(t["o"])(x)])}var I=Object(t["k"])("h5",null,"Import via Module",-1),g=Object(t["k"])("code",null,"\nimport InputMask from 'primevue/inputmask';\n\n",-1),M=[g],V=Object(t["k"])("h5",null,"Import via CDN",-1),x=Object(t["k"])("code",null,'\n<script src="https://unpkg.com/primevue@^3/core/core.min.js"><\/script>\n<script src="https://unpkg.com/primevue@^3/inputmask/inputmask.min.js"><\/script>\n\n',-1),P=[x],S=Object(t["k"])("h5",null,"Getting Started",-1),A=Object(t["k"])("p",null,"A model can be bound using the standard v-model directive.",-1),D=Object(t["k"])("code",null,'\n<InputMask v-model="value" mask="99-999999" />\n\n',-1),w=[D],C=Object(t["k"])("h5",null,"Mask",-1),N=Object(t["k"])("p",null,"Mask format can be a combination of the the following built-in definitions.",-1),H=Object(t["k"])("ul",null,[Object(t["k"])("li",null," a - Alpha character (A-Z,a-z) "),Object(t["k"])("li",null," 9 - Numeric character (0-9) "),Object(t["k"])("li",null," * - Alpha numberic character (A-Z,a-z,0-9) ")],-1),U=Object(t["k"])("code",null,'\n<InputMask v-model="value" mask="a*-999-a999" />\n\n',-1),E=[U],B=Object(t["k"])("h5",null,"SlotChar",-1),Z=Object(t["k"])("p",null,[Object(t["n"])("Underscore is the default placeholder for a mask and this can be customized using "),Object(t["k"])("i",null,"slotChart"),Object(t["n"])(" option.")],-1),z=Object(t["k"])("code",null,'\n<InputMask v-model="value" mask="99/99/9999" slotChar="mm/dd/yyyy" />\n\n',-1),_=[z],J=Object(t["k"])("h5",null,"Optional Values",-1),T=Object(t["k"])("p",null,[Object(t["n"])("If the input does not complete the mask definition, it is cleared by default. Use "),Object(t["k"])("i",null,"autoClear"),Object(t["n"])(" property to control this behavior. In addition, certain part of a mask can be made optional by using ? symbol where anything after the question mark becomes optional.")],-1),q=Object(t["k"])("code",null,'\n<InputMask v-model="value" mask="(999) 999-9999? x99999" />\n\n',-1),F=[q],G=Object(t["k"])("h5",null,"Properties",-1),Q=Object(t["k"])("p",null,"InputText passes any valid attribute to the underlying input element. In addition;",-1),K=Object(t["k"])("div",{class:"doc-tablewrapper"},[Object(t["k"])("table",{class:"doc-table"},[Object(t["k"])("thead",null,[Object(t["k"])("tr",null,[Object(t["k"])("th",null,"Name"),Object(t["k"])("th",null,"Type"),Object(t["k"])("th",null,"Default"),Object(t["k"])("th",null,"Description")])]),Object(t["k"])("tbody",null,[Object(t["k"])("tr",null,[Object(t["k"])("td",null,"modelValue"),Object(t["k"])("td",null,"any"),Object(t["k"])("td",null,"null"),Object(t["k"])("td",null,"Value of the component.")]),Object(t["k"])("tr",null,[Object(t["k"])("td",null,"mask"),Object(t["k"])("td",null,"string"),Object(t["k"])("td",null,"null"),Object(t["k"])("td",null,"Mask pattern.")]),Object(t["k"])("tr",null,[Object(t["k"])("td",null,"slotChar"),Object(t["k"])("td",null,"string"),Object(t["k"])("td",null,"_"),Object(t["k"])("td",null,"Placeholder character in mask, default is underscore.")]),Object(t["k"])("tr",null,[Object(t["k"])("td",null,"autoClear"),Object(t["k"])("td",null,"boolean"),Object(t["k"])("td",null,"true"),Object(t["k"])("td",null,"Clears the incomplete value on blur.")]),Object(t["k"])("tr",null,[Object(t["k"])("td",null,"unmask"),Object(t["k"])("td",null,"boolean"),Object(t["k"])("td",null,"false"),Object(t["k"])("td",null,"Defines if model sets the raw unmasked value to bound value or the formatted mask value.")])])])],-1),L=Object(t["k"])("h5",null,"Events",-1),R=Object(t["k"])("p",null,"Any valid event such as focus, blur and input are passed to the underlying input element.",-1),W=Object(t["k"])("h5",null,"Styling",-1),X=Object(t["n"])("Following is the list of structural style classes, for theming classes visit "),Y=Object(t["n"])("theming"),$=Object(t["n"])(" page."),ll=Object(t["k"])("div",{class:"doc-tablewrapper"},[Object(t["k"])("table",{class:"doc-table"},[Object(t["k"])("thead",null,[Object(t["k"])("tr",null,[Object(t["k"])("th",null,"Name"),Object(t["k"])("th",null,"Element")])]),Object(t["k"])("tbody",null,[Object(t["k"])("tr",null,[Object(t["k"])("td",null,"p-inputmask p-inputtext"),Object(t["k"])("td",null,"Input element")])])])],-1),el=Object(t["k"])("h5",null,"Dependencies",-1),nl=Object(t["k"])("p",null,"None.",-1);function tl(l,e,n,a,c,o){var d=Object(t["P"])("router-link"),s=Object(t["P"])("AppDoc"),u=Object(t["Q"])("code");return Object(t["H"])(),Object(t["h"])(s,{name:"InputMaskDemo",sources:c.sources,github:"inputmask/InputMaskDemo.vue"},{default:Object(t["Z"])((function(){return[I,Object(t["ab"])((Object(t["H"])(),Object(t["j"])("pre",null,M)),[[u,void 0,void 0,{script:!0}]]),V,Object(t["ab"])((Object(t["H"])(),Object(t["j"])("pre",null,P)),[[u]]),S,A,Object(t["ab"])((Object(t["H"])(),Object(t["j"])("pre",null,w)),[[u]]),C,N,H,Object(t["ab"])((Object(t["H"])(),Object(t["j"])("pre",null,E)),[[u]]),B,Z,Object(t["ab"])((Object(t["H"])(),Object(t["j"])("pre",null,_)),[[u]]),J,T,Object(t["ab"])((Object(t["H"])(),Object(t["j"])("pre",null,F)),[[u]]),G,Q,K,L,R,W,Object(t["k"])("p",null,[X,Object(t["o"])(d,{to:"/theming"},{default:Object(t["Z"])((function(){return[Y]})),_:1}),$]),ll,el,nl]})),_:1},8,["sources"])}var al={data:function(){return{sources:{"options-api":{tabName:"Options API Source",content:'\n<template>\n    <div>\n        <div class="p-fluid formgrid grid">\n            <div class="field col-12 md:col-4">\n                <label for="basic">Basic</label>\n                <InputMask mask="99-999999" v-model="val1" placeholder="99-999999" />\n            </div>\n\n            <div class="field col-12 md:col-4">\n                <label for="ssn">SSN</label>\n                <InputMask mask="999-99-9999" v-model="val2" placeholder="999-99-9999" />\n            </div>\n\n            <div class="field col-12 md:col-4">\n                <label for="date">Date</label>\n                <InputMask mask="99/99/9999" v-model="val3" placeholder="99/99/9999" slotChar="mm/dd/yyyy" />\n            </div>\n\n            <div class="field col-12 md:col-4">\n                <label for="Phone">Phone</label>\n                <InputMask mask="(999) 999-9999" v-model="val4" placeholder="(999) 999-9999" />\n            </div>\n\n            <div class="field col-12 md:col-4">\n                <label for="phoneext">Phone Ext</label>\n                <InputMask mask="(999) 999-9999? x99999" v-model="val5" placeholder="(999) 999-9999? x99999"/>\n            </div>\n\n            <div class="field col-12 md:col-4">\n                <label for="serial">Serial</label>\n                <InputMask mask="a*-999-a999" v-model="val6" placeholder="a*-999-a999" />\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            val1: null,\n            val2: null,\n            val3: null,\n            val4: null,\n            val5: null,\n            val6: null\n        }\n    }\n}\n<\\/script>\n'},"composition-api":{tabName:"Composition API Source",content:'\n<template>\n    <div>\n        <div class="p-fluid formgrid grid">\n            <div class="field col-12 md:col-4">\n                <label for="basic">Basic</label>\n                <InputMask mask="99-999999" v-model="val1" placeholder="99-999999" />\n            </div>\n\n            <div class="field col-12 md:col-4">\n                <label for="ssn">SSN</label>\n                <InputMask mask="999-99-9999" v-model="val2" placeholder="999-99-9999" />\n            </div>\n\n            <div class="field col-12 md:col-4">\n                <label for="date">Date</label>\n                <InputMask mask="99/99/9999" v-model="val3" placeholder="99/99/9999" slotChar="mm/dd/yyyy" />\n            </div>\n\n            <div class="field col-12 md:col-4">\n                <label for="Phone">Phone</label>\n                <InputMask mask="(999) 999-9999" v-model="val4" placeholder="(999) 999-9999" />\n            </div>\n\n            <div class="field col-12 md:col-4">\n                <label for="phoneext">Phone Ext</label>\n                <InputMask mask="(999) 999-9999? x99999" v-model="val5" placeholder="(999) 999-9999? x99999"/>\n            </div>\n\n            <div class="field col-12 md:col-4">\n                <label for="serial">Serial</label>\n                <InputMask mask="a*-999-a999" v-model="val6" placeholder="a*-999-a999" />\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { ref } from \'vue\';\n\nexport default {\n    setup() {\n        const val1 = ref();\n        const val2 = ref();\n        const val3 = ref();\n        const val4 = ref();\n        const val5 = ref();\n        const val6 = ref();\n\n        return { val1, val2, val3, val4, val5, val6 }\n    }\n}\n<\\/script>\n'},"browser-source":{tabName:"Browser Source",imports:'<script src="https://unpkg.com/primevue@^3/inputmask/inputmask.min.js"><\\/script>',content:'<div id="app">\n            <div class="p-fluid formgrid grid">\n                <div class="field col-12 md:col-4">\n                    <label for="basic">Basic</label>\n                    <p-inputmask mask="99-999999" v-model="val1" placeholder="99-999999"></p-inputmask>\n                </div>\n\n                <div class="field col-12 md:col-4">\n                    <label for="ssn">SSN</label>\n                    <p-inputmask mask="999-99-9999" v-model="val2" placeholder="999-99-9999"></p-inputmask>\n                </div>\n\n                <div class="field col-12 md:col-4">\n                    <label for="date">Date</label>\n                    <p-inputmask mask="99/99/9999" v-model="val3" placeholder="99/99/9999" slot-char="mm/dd/yyyy"></p-inputmask>\n                </div>\n\n                <div class="field col-12 md:col-4">\n                    <label for="Phone">Phone</label>\n                    <p-inputmask mask="(999) 999-9999" v-model="val4" placeholder="(999) 999-9999"></p-inputmask>\n                </div>\n\n                <div class="field col-12 md:col-4">\n                    <label for="phoneext">Phone Ext</label>\n                    <p-inputmask mask="(999) 999-9999? x99999" v-model="val5" placeholder="(999) 999-9999? x99999"></p-inputmask>\n                </div>\n\n                <div class="field col-12 md:col-4">\n                    <label for="serial">Serial</label>\n                    <p-inputmask mask="a*-999-a999" v-model="val6" placeholder="a*-999-a999"></p-inputmask>\n                </div>\n            </div>\n        </div>\n\n        <script type="module">\n        const { createApp, ref } = Vue;\n\n        const App = {\n            setup() {\n                const val1 = ref();\n                const val2 = ref();\n                const val3 = ref();\n                const val4 = ref();\n                const val5 = ref();\n                const val6 = ref();\n\n                return { val1, val2, val3, val4, val5, val6 }\n            },\n            components: {\n                "p-inputmask": primevue.inputmask\n            }\n        };\n\n        createApp(App)\n            .use(primevue.config.default)\n            .mount("#app");\n        <\\/script>\n'}}}}},cl=n("6b0d"),ol=n.n(cl);const dl=ol()(al,[["render",tl]]);var sl=dl,ul={data:function(){return{val1:null,val2:null,val3:null,val4:null,val5:null,val6:null}},components:{InputMaskDoc:sl}};const il=ol()(ul,[["render",y]]);e["default"]=il}}]);